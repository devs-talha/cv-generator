CREATE DATABASE  IF NOT EXISTS `web_project` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;
USE `web_project`;
-- MySQL dump 10.13  Distrib 8.0.27, for Win64 (x86_64)
--
-- Host: localhost    Database: web_project
-- ------------------------------------------------------
-- Server version	8.0.27

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `basic_information`
--

DROP TABLE IF EXISTS `basic_information`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `basic_information` (
  `id` int NOT NULL AUTO_INCREMENT,
  `cv_id` int NOT NULL,
  `name` varchar(45) NOT NULL,
  `birth_date` date NOT NULL,
  `address` varchar(255) NOT NULL,
  UNIQUE KEY `id_UNIQUE` (`id`),
  UNIQUE KEY `cv_id_UNIQUE` (`cv_id`),
  CONSTRAINT `cv_and_basic_information` FOREIGN KEY (`cv_id`) REFERENCES `cv` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `basic_information`
--

LOCK TABLES `basic_information` WRITE;
/*!40000 ALTER TABLE `basic_information` DISABLE KEYS */;
INSERT INTO `basic_information` VALUES (6,12,'Talha Munir','1997-02-13','House 123, Block 2, Sector C2, Township, Karachi'),(15,21,'Umair Munir','2003-06-26','gjg\r\nhjg');
/*!40000 ALTER TABLE `basic_information` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `certificate`
--

DROP TABLE IF EXISTS `certificate`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `certificate` (
  `id` int NOT NULL AUTO_INCREMENT,
  `cv_id` int NOT NULL,
  `name` varchar(45) NOT NULL,
  `institute` varchar(45) NOT NULL,
  `completion_date` date NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id_UNIQUE` (`id`),
  KEY `cv_and_certificate_idx` (`cv_id`),
  CONSTRAINT `cv_and_certificate` FOREIGN KEY (`cv_id`) REFERENCES `cv` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `certificate`
--

LOCK TABLES `certificate` WRITE;
/*!40000 ALTER TABLE `certificate` DISABLE KEYS */;
INSERT INTO `certificate` VALUES (6,21,'yes','123','2022-01-10'),(7,12,'Python for everybody (Specialization)','University of Stanford','2021-12-09'),(8,12,'Graphic Designing','DigiSkills','2011-07-06');
/*!40000 ALTER TABLE `certificate` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `contact_information`
--

DROP TABLE IF EXISTS `contact_information`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `contact_information` (
  `id` int NOT NULL AUTO_INCREMENT,
  `cv_id` int NOT NULL,
  `name` varchar(45) NOT NULL,
  `url` varchar(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id_UNIQUE` (`id`),
  KEY `cv_and_contact_info_idx` (`cv_id`),
  CONSTRAINT `cv_and_contact_info` FOREIGN KEY (`cv_id`) REFERENCES `cv` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `contact_information`
--

LOCK TABLES `contact_information` WRITE;
/*!40000 ALTER TABLE `contact_information` DISABLE KEYS */;
INSERT INTO `contact_information` VALUES (9,12,'Facebook','fb.com/talhamunir'),(12,12,'Email','talha425006@gmail.com'),(13,21,'Phone Number','+92 330 2822259'),(14,21,'Discord','Xmair#1730'),(16,12,'LinkedIn','linkedin.com/talhamunir');
/*!40000 ALTER TABLE `contact_information` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `cv`
--

DROP TABLE IF EXISTS `cv`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `cv` (
  `id` int NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL,
  `created_date` date NOT NULL,
  `modified_date` date DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id_UNIQUE` (`id`),
  KEY `cv_and_user_idx` (`user_id`),
  CONSTRAINT `cv_and_user` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `cv`
--

LOCK TABLES `cv` WRITE;
/*!40000 ALTER TABLE `cv` DISABLE KEYS */;
INSERT INTO `cv` VALUES (12,3,'2022-01-21','2022-01-26'),(21,5,'2022-01-22',NULL);
/*!40000 ALTER TABLE `cv` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `education`
--

DROP TABLE IF EXISTS `education`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `education` (
  `id` int NOT NULL AUTO_INCREMENT,
  `cv_id` int NOT NULL,
  `name` varchar(45) NOT NULL,
  `institute` varchar(45) NOT NULL,
  `start_date` date NOT NULL,
  `end_date` date DEFAULT NULL,
  `grade` varchar(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id_UNIQUE` (`id`),
  KEY `cv_and_education_idx` (`cv_id`),
  CONSTRAINT `cv_and_education` FOREIGN KEY (`cv_id`) REFERENCES `cv` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `education`
--

LOCK TABLES `education` WRITE;
/*!40000 ALTER TABLE `education` DISABLE KEYS */;
INSERT INTO `education` VALUES (7,12,'Matriculation','Educators','2022-02-03','2022-01-21','A+'),(8,21,'Matric','The Educators','2021-07-29','2124-12-04','A+'),(9,21,'Inter','Concordia','1221-12-12',NULL,'A+'),(10,12,'Intermediate','Concordia College','2014-06-24','2022-01-21','A+'),(11,12,'Bachelors in Software Engineering','University of the Punjab','2019-10-26',NULL,'3.9 CGPA');
/*!40000 ALTER TABLE `education` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `interest`
--

DROP TABLE IF EXISTS `interest`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `interest` (
  `id` int NOT NULL AUTO_INCREMENT,
  `cv_id` int NOT NULL,
  `name` varchar(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id_UNIQUE` (`id`),
  KEY `cv_and_interest_idx` (`cv_id`),
  CONSTRAINT `cv_and_interest` FOREIGN KEY (`cv_id`) REFERENCES `cv` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `interest`
--

LOCK TABLES `interest` WRITE;
/*!40000 ALTER TABLE `interest` DISABLE KEYS */;
INSERT INTO `interest` VALUES (8,21,'nono'),(9,21,'yes'),(10,12,'Astrophotography'),(11,12,'Sports');
/*!40000 ALTER TABLE `interest` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `language`
--

DROP TABLE IF EXISTS `language`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `language` (
  `id` int NOT NULL AUTO_INCREMENT,
  `cv_id` int NOT NULL,
  `name` varchar(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id_UNIQUE` (`id`),
  KEY `language_and_all_language_idx` (`name`),
  KEY `cv_and_language_idx` (`cv_id`),
  CONSTRAINT `cv_and_language` FOREIGN KEY (`cv_id`) REFERENCES `cv` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `language`
--

LOCK TABLES `language` WRITE;
/*!40000 ALTER TABLE `language` DISABLE KEYS */;
INSERT INTO `language` VALUES (8,12,'English'),(9,12,'Urdu'),(10,21,'asdgasdgsadg'),(11,21,'asdg'),(12,21,'asdgasdggsdag');
/*!40000 ALTER TABLE `language` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `project`
--

DROP TABLE IF EXISTS `project`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `project` (
  `id` int NOT NULL AUTO_INCREMENT,
  `cv_id` int NOT NULL,
  `name` varchar(45) NOT NULL,
  `details` mediumtext,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id_UNIQUE` (`id`),
  KEY `cv_and_project_idx` (`cv_id`),
  CONSTRAINT `cv_and_project` FOREIGN KEY (`cv_id`) REFERENCES `cv` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `project`
--

LOCK TABLES `project` WRITE;
/*!40000 ALTER TABLE `project` DISABLE KEYS */;
INSERT INTO `project` VALUES (4,21,'klkllk','klklkl'),(5,12,'Automated Robot','The program was developed in Python language.\r\nPyAudio and Speech Recognition modules were used.\r\nThe program would listen to the user\'s command and based on those commands it would perform some predefined operations.'),(6,12,'CV Generator','The program was developed in MVC architecture.');
/*!40000 ALTER TABLE `project` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `skill`
--

DROP TABLE IF EXISTS `skill`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `skill` (
  `id` int NOT NULL AUTO_INCREMENT,
  `cv_id` int NOT NULL,
  `name` varchar(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id_UNIQUE` (`id`),
  KEY `cv_and_skill_idx` (`cv_id`),
  CONSTRAINT `cv_and_skill` FOREIGN KEY (`cv_id`) REFERENCES `cv` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `skill`
--

LOCK TABLES `skill` WRITE;
/*!40000 ALTER TABLE `skill` DISABLE KEYS */;
INSERT INTO `skill` VALUES (11,12,'Analysis of Algorithm'),(12,12,'Web programming'),(13,21,'yes'),(14,21,'yesyseysey'),(15,21,'yseysey'),(16,12,'C++'),(17,12,'Java'),(18,12,'Python'),(19,12,'C#'),(20,12,'C'),(21,12,'JavaScript'),(22,12,'ReactJs');
/*!40000 ALTER TABLE `skill` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `user` (
  `id` int NOT NULL AUTO_INCREMENT,
  `first_name` varchar(45) NOT NULL,
  `last_name` varchar(45) DEFAULT NULL,
  `email` varchar(45) NOT NULL,
  `birth_date` date DEFAULT NULL,
  `password` varchar(45) NOT NULL,
  `address` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id_UNIQUE` (`id`),
  UNIQUE KEY `email_UNIQUE` (`email`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES (3,'Talha','Munir','talha425006@gmail.com','1997-02-12','asd','House 123, Block 2, Sector C2, Township, Karachi'),(4,'Talha','d','asd@gmail.co','2022-02-04','asd','ddd'),(5,'Umair','Munir','omairmunir644@gmail.com','2003-06-26','QvWm8ZLAs4nJjYg','gjg\r\nhjg');
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `work_experience`
--

DROP TABLE IF EXISTS `work_experience`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `work_experience` (
  `id` int NOT NULL AUTO_INCREMENT,
  `cv_id` int NOT NULL,
  `role` varchar(45) NOT NULL,
  `institute` varchar(45) NOT NULL,
  `start_date` date NOT NULL,
  `end_date` date DEFAULT NULL,
  `details` mediumtext NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id_UNIQUE` (`id`),
  KEY `cv_and_work_experience_idx` (`cv_id`),
  CONSTRAINT `cv_and_work_experience` FOREIGN KEY (`cv_id`) REFERENCES `cv` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `work_experience`
--

LOCK TABLES `work_experience` WRITE;
/*!40000 ALTER TABLE `work_experience` DISABLE KEYS */;
INSERT INTO `work_experience` VALUES (5,21,'asdfas','sadfasdf','2022-01-12',NULL,'asdf'),(6,12,'Software Developer','Google','2022-01-02','2022-01-20','Worked on the upcoming metaverse project.');
/*!40000 ALTER TABLE `work_experience` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2022-01-27  8:48:16

----

package com.github.tm_425006.webproject;

import com.github.tm_425006.webproject.bean.*;
import com.itextpdf.html2pdf.ConverterProperties;
import com.itextpdf.html2pdf.HtmlConverter;
import com.itextpdf.html2pdf.resolver.font.DefaultFontProvider;
import com.itextpdf.io.font.FontProgramFactory;
import com.itextpdf.layout.font.FontProvider;

import java.io.*;
import java.util.List;

public class CVGenerator {
    private final CV cv;

    public CVGenerator(CV cv) {
        this.cv = cv;
    }

    public String generateHTML() {
        StringBuilder html = new StringBuilder();
        html.append("""
                <html lang="en">
                  <head>
                    <meta charset="UTF-8" />
                                
                    <style>
                      html {
                        font-size: 15px;
                        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
                      }
                                
                      .main-border {
                        border: 1px solid rgba(201, 201, 201, 255);
                      }
                                
                      .center {
                        margin-left: auto;
                        margin-right: auto;
                      }
                                
                      em {
                        font-weight: 600;
                        font-style: normal;
                      }
                                
                      td {
                        padding: 0.5rem 4rem 0.5rem 4rem;
                      }
                      
                    span {
                          background-color: gray;
                          color: white;
                          border-radius: 5px;
                          padding: 2px 5px;
                        }
                                
                       hr {
                         opacity: 0.5;
                         border: 1px solid rgba(201, 201, 201, 255);
                         margin-top: 0.5rem;
                         margin-bottom: 0.5rem;
                       }
                 
                       .left-margin {
                         margin-left: 0.5rem;
                       }
                                
                      .bottom-margin {
                        margin-bottom: 0.5rem;
                      }
                    </style>
                    <title>CV</title>
                  </head>
                            
                """);


        html.append("""
                <body>
                    <div class="main-border">
                      <div>
                        <table class="center">
                          <tr>
                            <td><em>Name</em></td>
                """);
        html.append(String.format("<td>%s</td>", this.getCv().getBasicInformation().getName()));
        html.append("""
                </tr>
                                
                          <tr>
                            <td><em>Date of Birth</em></td>
                """);
        html.append(String.format("<td>%s</td>", this.getCv().getBasicInformation().getBirthDate()));
        html.append("""
                 </tr>
                                
                          <tr>
                            <td><em>Address</em></td>
                """);
        html.append(String.format("<td>%s</td>", this.getCv().getBasicInformation().getAddress()));
        html.append("""
                 </tr>
                        </table>
                      </div>
                """);
        if (this.getCv().getContactInformationList() != null && this.getCv().getContactInformationList().size() != 0) {
            html.append("""
                    <hr />
                         <div>
                           <div>
                             <h3 class="left-margin"><em>Contact Information</em></h3>
                             <hr />
                           </div>
                   
                           <div>
                             <figure>
                               <dl>
                    """);
            for (ContactInformation contactInformation : this.getCv().getContactInformationList()) {
                html.append(String.format("<dt class=\"left-margin\"><em>%s</em></dt>", contactInformation.getName()));
                html.append(String.format("<dd class=\"bottom-margin\">%s</dd>", contactInformation.getUrl()));
            }
            html.append("""
                      </dl>
                            </figure>
                          </div>
                        </div>
                    """);

        }
        if (this.getCv().getCertificates() != null && this.getCv().getCertificates().size() != 0) {
            html.append("""
                     <hr />
                      <div>
                        <div>
                          <h3 class="left-margin"><em>Certificates</em></h3>
                          <hr />
                        </div>
                        <figure>
                          <ul>
                    """);
            for (Certificate certificate : this.getCv().getCertificates()) {
                html.append(String.format("<li><p>%s - %s <cite>(%s)</cite></p></li>", certificate.getName(),
                        certificate.getInstitute(), certificate.getCompletionDate()));
            }
            html.append("""
                    </ul>
                       </figure>
                     </div>
                    """);
        }
        if (this.getCv().getEducations() != null && this.getCv().getEducations().size() != 0) {
            html.append("""
                    <hr />
                      <div>
                        <div>
                          <h3 class="left-margin"><em>Education Details</em></h3>
                        </div>
                        <hr />
                      </div>
                
                      <div>
                """);
            for (Education education : this.getCv().getEducations()) {
                html.append("""
                        <figure>
                        """);
                html.append(education.getName());
                html.append("""
                                            <ul>
                        """);
                html.append(String.format("<li>%s</li>", education.getInstitute()));
                html.append("""
                        <li>
                        """);
                html.append(education.getStartDate());
                html.append(" - ");
                if (education.getEndDate() == null)
                    html.append("<cite>Present</cite>");
                else
                    html.append(education.getEndDate());
                html.append("""
                        </li>
                        """);
                html.append(String.format("<li>%s</li>", education.getGrade()));
                html.append("""
                         </ul>
                                  </figure>
                        """);
            }
            html.append("""
                    </div>
                    """);
        }

        if (this.getCv().getProjects() != null && this.getCv().getProjects().size() != 0) {
            html.append("""
                     <hr />
                          <div>
                            <div>
                              <h3 class="left-margin"><em>Projects</em></h3>
                            </div>
                            <hr />
                          </div>
                    """);
            for (Project project : this.getCv().getProjects()) {
                html.append("""
                                  <figure>
                        """);
                html.append(project.getName());
                html.append(String.format("<ul><li>%s</li></ul>", project.getDetails()));
                html.append("""
                        </figure>
                        """);
            }

        }

        if (this.getCv().getWorkExperiences() != null && this.getCv().getWorkExperiences().size() != 0) {
            html.append("""
                    <hr />
                          <div>
                            <div>
                              <h3 class="left-margin"><em>Work Experience</em></h3>
                            </div>
                            <hr />
                          </div>
                    """);
            for (WorkExperience workExperience : this.getCv().getWorkExperiences()) {
                html.append("""
                                  <figure>
                        """);
                html.append(workExperience.getRole());
                html.append("""
                        <ul>
                        """);
                html.append(String.format("<li>%s</li>", workExperience.getInstitute()));
                html.append(String.format("<li>%s - ", workExperience.getStartDate()));
                if (workExperience.getEndDate() == null)
                    html.append("<cite>Present</cite></li>");
                else
                    html.append(String.format("%s</li>", workExperience.getEndDate()));
                html.append(String.format("<li>%s</li>", workExperience.getDetails()));
                html.append("""
                        </ul>
                        """);

                html.append("""
                        </figure>
                        """);
            }
        }
        if (this.getCv().getLanguages() != null && this.getCv().getLanguages().size() != 0) {
            html.append("""
                    <hr />
                          <div>
                            <div>
                              <h3 class="left-margin"><em>Languages</em></h3>
                            </div>
                            <hr />
                          </div>
                          <figure>
                    """);
            for (Language language : this.getCv().getLanguages()) {
                html.append(String.format("<span class=\"bottom-margin\">%s</span>&nbsp;",
                        language.getName()));
            }
            html.append("""
                     </figure>
                    """);
        }

        if (this.getCv().getSkills() != null && this.getCv().getSkills().size() != 0) {
            html.append("""
                     <hr />
                          <div>
                            <div>
                              <h3 class="left-margin"><em>Skills</em></h3>
                            </div>
                            <hr />
                          </div>
                          <figure>
                    """);
            for (Skill skill : this.getCv().getSkills()) {
                html.append(String.format("<span class=\"bottom-margin\">%s</span>&nbsp;",
                        skill.getName()));
            }
            html.append("""
                    </figure>
                    """);
        }
        if (this.getCv().getInterests() != null && this.getCv().getInterests().size() != 0) {
            html.append("""
                     <hr />
                                        
                          <div>
                            <div>
                              <h3 class="left-margin"><em>Interests</em></h3>
                            </div>
                            <hr />
                          </div>
                                        
                          <figure>
                    """);
            for (Interest interest : this.getCv().getInterests()) {
                html.append(String.format("<span class=\"bottom-margin\">%s</span>&nbsp;",
                        interest.getName()));
            }
            html.append("""
                    </figure>
                    """);
        }
        html.append("""
                </div>
                  </body>
                </html>
                """);
        return html.toString();
    }

    public byte[] generatePDF(String resourcesPath) throws IOException {
        String generatedHTML = this.generateHTML();
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        ConverterProperties properties = new ConverterProperties();
        FontProvider fontProvider = new DefaultFontProvider();
        String fontsPath = resourcesPath.concat("/fonts/");
        List<String> fonts = List.of("Segoe UI.ttf", "Segoe UI Bold Italic.ttf", "Segoe UI Bold.ttf",
                "Segoe UI Italic.ttf");
        for (String fontFile : fonts) {
            try (InputStream inputStream = new FileInputStream(fontsPath.concat(fontFile))) {
                fontProvider.addFont(inputStream.readAllBytes());
            }
        }
        properties.setFontProvider(fontProvider);
        HtmlConverter.convertToPdf(generatedHTML, outputStream, properties);
        return outputStream.toByteArray();
    }

    private CV getCv() {
        return cv;
    }
}

----

package com.github.tm_425006.webproject;

import com.github.tm_425006.webproject.bean.User;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

public class SessionUtils {
    public static boolean verifySession(HttpServletRequest request, HttpServletResponse response) throws IOException {
        if (request.getSession() == null) {
            response.sendRedirect("login.jsp?error=Invalid session");
            return false;
        }
        User user = (User) request.getSession().getAttribute("user");
        if (user == null || user.getId() == null || user.getId() == -1) {
            response.sendRedirect("login.jsp?error=Invalid session");
            return false;
        }
        return true;
    }
}

----

package com.github.tm_425006.webproject;

import javax.servlet.ServletContext;
import java.sql.Date;
import java.util.Properties;

public class Utils {
    public static Properties servletContextToProperties(ServletContext servletContext) {
        Properties properties = new Properties();
        properties.setProperty("db-host", servletContext.getInitParameter("db-host"));
        properties.setProperty("db-port", servletContext.getInitParameter("db-port"));
        properties.setProperty("db-name", servletContext.getInitParameter("db-name"));
        properties.setProperty("db-user", servletContext.getInitParameter("db-user"));
        properties.setProperty("db-password", servletContext.getInitParameter("db-password"));
        return properties;
    }
}

----

package com.github.tm_425006.webproject.bean;

import java.io.Serializable;
import java.sql.Date;
import java.util.Objects;

public class BasicInformation implements Serializable {
    private Integer id;
    private Integer cvId;
    private String name;
    private String address;
    private Date birthDate;

    public BasicInformation() {
    }

    public BasicInformation(Integer id, Integer cvId, String name, String address, Date birthDate) {
        this.id = id;
        this.cvId = cvId;
        this.name = name;
        this.address = address;
        this.birthDate = birthDate;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Integer getCvId() {
        return cvId;
    }

    public void setCvId(Integer cvId) {
        this.cvId = cvId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public Date getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(Date birthDate) {
        this.birthDate = birthDate;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        BasicInformation that = (BasicInformation) o;
        return Objects.equals(id, that.id) && cvId.equals(that.cvId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, cvId);
    }

    @Override
    public String toString() {
        return "BasicInformation{" +
                "id=" + id +
                ", cvId=" + cvId +
                ", name='" + name + '\'' +
                ", address='" + address + '\'' +
                ", birthDate=" + birthDate +
                '}';
    }
}

----

package com.github.tm_425006.webproject.bean;

import javax.servlet.http.HttpServletRequest;
import java.sql.Date;
import java.util.ArrayList;
import java.util.Map;

public class BeanUtils {
    public static User createUser(Map<String, String[]> parameterMap) {
        User user = new User();
        if (parameterMap.containsKey("id"))
            user.setId(Integer.valueOf(parameterMap.get("id")[0].trim()));
        if (parameterMap.containsKey("firstName"))
            user.setFirstName(parameterMap.get("firstName")[0].trim());
        if (parameterMap.containsKey("lastName"))
            user.setLastName(parameterMap.get("lastName")[0].trim());
        if (parameterMap.containsKey("email"))
            user.setEmail(parameterMap.get("email")[0].trim());
        if (parameterMap.containsKey("birthDate"))
            user.setBirthDate(Date.valueOf(parameterMap.get("birthDate")[0].trim()));
        if (parameterMap.containsKey("password"))
            user.setPassword(parameterMap.get("password")[0].trim());
        if (parameterMap.containsKey("address"))
            user.setAddress(parameterMap.get("address")[0].trim());
        return user;
    }

    public static BasicInformation createBasicInformation(Map<String, String[]> parameterMap) {
        BasicInformation basicInformation = new BasicInformation();
        if (parameterMap.containsKey("basicInformationId"))
            basicInformation.setId(Integer.valueOf(parameterMap.get("basicInformationId")[0].trim()));
        if (parameterMap.containsKey("basicInformationCvId"))
            basicInformation.setCvId(Integer.valueOf(parameterMap.get("basicInformationCvId")[0].trim()));
        if (parameterMap.containsKey("basicInformationName"))
            basicInformation.setName(parameterMap.get("basicInformationName")[0].trim());
        if (parameterMap.containsKey("basicInformationBirthDate"))
            basicInformation.setBirthDate(Date.valueOf(parameterMap.get("basicInformationBirthDate")[0].trim()));
        if (parameterMap.containsKey("basicInformationAddress"))
            basicInformation.setAddress(parameterMap.get("basicInformationAddress")[0].trim());
        return basicInformation;
    }

    public static Certificate createCertificate(Map<String, String[]> parameterMap, int index) {
        Certificate certificate = new Certificate();
        if (parameterMap.containsKey("certificateId"))
            certificate.setId(Integer.valueOf(parameterMap.get("certificateId")[index].trim()));
        if (parameterMap.containsKey("certificateCvId"))
            certificate.setCvId(Integer.valueOf(parameterMap.get("certificateCvId")[index].trim()));
        if (parameterMap.containsKey("certificateName"))
            certificate.setName(parameterMap.get("certificateName")[index].trim());
        if (parameterMap.containsKey("certificateCompletionDate"))
            certificate.setCompletionDate(Date.valueOf(parameterMap.get("certificateCompletionDate")[index].trim()));
        if (parameterMap.containsKey("certificateInstitute"))
            certificate.setInstitute(parameterMap.get("certificateInstitute")[index].trim());
        return certificate;
    }

    public static ContactInformation createContactInformation(Map<String, String[]> parameterMap, int index) {
        ContactInformation contactInformation = new ContactInformation();
        if (parameterMap.containsKey("contactInformationId"))
            contactInformation.setId(Integer.valueOf(parameterMap.get("contactInformationId")[index].trim()));
        if (parameterMap.containsKey("contactInformationCvId"))
            contactInformation.setCvId(Integer.valueOf(parameterMap.get("contactInformationCvId")[index].trim()));
        if (parameterMap.containsKey("contactInformationName"))
            contactInformation.setName(parameterMap.get("contactInformationName")[index].trim());
        if (parameterMap.containsKey("contactInformationUrl"))
            contactInformation.setUrl(parameterMap.get("contactInformationUrl")[index].trim());
        return contactInformation;
    }

    public static Education createEducation(Map<String, String[]> parameterMap, int index) {
        Education education = new Education();
        if (parameterMap.containsKey("educationId"))
            education.setId(Integer.valueOf(parameterMap.get("educationId")[index].trim()));
        if (parameterMap.containsKey("educationCvId"))
            education.setCvId(Integer.valueOf(parameterMap.get("educationCvId")[index].trim()));
        if (parameterMap.containsKey("educationName"))
            education.setName(parameterMap.get("educationName")[index].trim());
        if (parameterMap.containsKey("educationInstitute"))
            education.setInstitute(parameterMap.get("educationInstitute")[index].trim());
        if (parameterMap.containsKey("educationStartDate"))
            education.setStartDate(Date.valueOf(parameterMap.get("educationStartDate")[index].trim()));
        if (parameterMap.containsKey("educationEndDate") &&
                !parameterMap.get("educationEndDate")[index].trim().isEmpty())
            education.setEndDate(Date.valueOf(parameterMap.get("educationEndDate")[index].trim()));
        if (parameterMap.containsKey("educationGrade"))
            education.setGrade(parameterMap.get("educationGrade")[index].trim());
        return education;
    }

    public static WorkExperience createWorkExperience(Map<String, String[]> parameterMap, int index) {
        WorkExperience workExperience = new WorkExperience();
        if (parameterMap.containsKey("workExperienceId"))
            workExperience.setId(Integer.valueOf(parameterMap.get("workExperienceId")[index].trim()));
        if (parameterMap.containsKey("workExperienceCvId"))
            workExperience.setCvId(Integer.valueOf(parameterMap.get("workExperienceCvId")[index].trim()));
        if (parameterMap.containsKey("workExperienceRole"))
            workExperience.setRole(parameterMap.get("workExperienceRole")[index].trim());
        if (parameterMap.containsKey("workExperienceInstitute"))
            workExperience.setInstitute(parameterMap.get("workExperienceInstitute")[index].trim());
        if (parameterMap.containsKey("workExperienceStartDate"))
            workExperience.setStartDate(Date.valueOf(parameterMap.get("workExperienceStartDate")[index].trim()));
        if (parameterMap.containsKey("workExperienceEndDate") &&
                !parameterMap.get("workExperienceEndDate")[index].trim().isEmpty())
            workExperience.setEndDate(Date.valueOf(parameterMap.get("workExperienceEndDate")[index].trim()));
        if (parameterMap.containsKey("workExperienceDetails"))
            workExperience.setDetails(parameterMap.get("workExperienceDetails")[index].trim());
        return workExperience;
    }

    public static Project createProject(Map<String, String[]> parameterMap, int index) {
        Project project = new Project();
        if (parameterMap.containsKey("projectId"))
            project.setId(Integer.valueOf(parameterMap.get("projectId")[index].trim()));
        if (parameterMap.containsKey("projectCvId"))
            project.setCvId(Integer.valueOf(parameterMap.get("projectCvId")[index].trim()));
        if (parameterMap.containsKey("projectName"))
            project.setName(parameterMap.get("projectName")[index].trim());
        if (parameterMap.containsKey("projectDetails"))
            project.setDetails(parameterMap.get("projectDetails")[index].trim());
        return project;
    }

    public static Skill createSkill(Map<String, String[]> parameterMap, int index) {
        Skill skill = new Skill();
        if (parameterMap.containsKey("skillId"))
            skill.setId(Integer.valueOf(parameterMap.get("skillId")[index].trim()));
        if (parameterMap.containsKey("skillCvId"))
            skill.setCvId(Integer.valueOf(parameterMap.get("skillCvId")[index].trim()));
        if (parameterMap.containsKey("skillName"))
            skill.setName(parameterMap.get("skillName")[index].trim());
        return skill;
    }

    public static Interest createInterest(Map<String, String[]> parameterMap, int index) {
        Interest interest = new Interest();
        if (parameterMap.containsKey("interestId"))
            interest.setId(Integer.valueOf(parameterMap.get("interestId")[index].trim()));
        if (parameterMap.containsKey("interestCvId"))
            interest.setCvId(Integer.valueOf(parameterMap.get("interestCvId")[index].trim()));
        if (parameterMap.containsKey("interestName"))
            interest.setName(parameterMap.get("interestName")[index].trim());
        return interest;
    }

    public static Language createLanguage(Map<String, String[]> parameterMap, int index) {
        Language language = new Language();
        if (parameterMap.containsKey("languageId"))
            language.setId(Integer.valueOf(parameterMap.get("languageId")[index].trim()));
        if (parameterMap.containsKey("languageCvId"))
            language.setCvId(Integer.valueOf(parameterMap.get("languageCvId")[index].trim()));
        if (parameterMap.containsKey("languageName"))
            language.setName(parameterMap.get("languageName")[index].trim());
        return language;
    }

    public static CV createCV(Map<String, String[]> parameterMap) {
        CV cv = new CV();

        if (parameterMap.containsKey("id"))
            cv.setId(Integer.valueOf(parameterMap.get("id")[0].trim()));
        if (parameterMap.containsKey("userId"))
            cv.setUserId(Integer.valueOf(parameterMap.get("userId")[0].trim()));

        if (parameterMap.containsKey("basicInformationId"))
            cv.setBasicInformation(createBasicInformation(parameterMap));

        if (parameterMap.containsKey("certificateId")) {
            for (int index = 0; index < parameterMap.get("certificateId").length; index++)
                cv.getCertificates().add(createCertificate(parameterMap, index));
        }
        if (parameterMap.containsKey("educationId")) {
            for (int index = 0; index < parameterMap.get("educationId").length; index++)
                cv.getEducations().add(createEducation(parameterMap, index));
        }
        if (parameterMap.containsKey("contactInformationId")) {
            for (int index = 0; index < parameterMap.get("contactInformationId").length; index++)
                cv.getContactInformationList().add(createContactInformation(parameterMap, index));
        }
        if (parameterMap.containsKey("languageId")) {
            for (int index = 0; index < parameterMap.get("languageId").length; index++)
                cv.getLanguages().add(createLanguage(parameterMap, index));
        }
        if (parameterMap.containsKey("interestId")) {
            for (int index = 0; index < parameterMap.get("interestId").length; index++)
                cv.getInterests().add(createInterest(parameterMap, index));
        }
        if (parameterMap.containsKey("projectId")) {
            for (int index = 0; index < parameterMap.get("projectId").length; index++)
                cv.getProjects().add(createProject(parameterMap, index));
        }
        if (parameterMap.containsKey("workExperienceId")) {
            for (int index = 0; index < parameterMap.get("workExperienceId").length; index++)
                cv.getWorkExperiences().add(createWorkExperience(parameterMap, index));
        }
        if (parameterMap.containsKey("skillId")) {
            for (int index = 0; index < parameterMap.get("skillId").length; index++)
                cv.getSkills().add(createSkill(parameterMap, index));
        }

        return cv;
    }
}

----

package com.github.tm_425006.webproject.bean;

import java.io.Serializable;
import java.sql.Date;
import java.util.Objects;

public class Certificate implements Serializable {
    private Integer id;
    private Integer cvId;
    private String name;
    private String institute;
    private Date completionDate;

    public Certificate() {
    }

    public Certificate(Integer id, Integer cvId, String name, String institute, Date completionDate) {
        this.id = id;
        this.cvId = cvId;
        this.name = name;
        this.institute = institute;
        this.completionDate = completionDate;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Integer getCvId() {
        return cvId;
    }

    public void setCvId(Integer cvId) {
        this.cvId = cvId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getInstitute() {
        return institute;
    }

    public void setInstitute(String institute) {
        this.institute = institute;
    }

    public Date getCompletionDate() {
        return completionDate;
    }

    public void setCompletionDate(Date completionDate) {
        this.completionDate = completionDate;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Certificate that = (Certificate) o;
        return Objects.equals(id, that.id) && cvId.equals(that.cvId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, cvId);
    }

    @Override
    public String toString() {
        return "Certificate{" +
                "id=" + id +
                ", cvId=" + cvId +
                ", name='" + name + '\'' +
                ", institute='" + institute + '\'' +
                ", completionDate=" + completionDate +
                '}';
    }
}

----

package com.github.tm_425006.webproject.bean;

import java.io.Serializable;
import java.util.Objects;

public class ContactInformation implements Serializable {
    private Integer id;
    private Integer cvId;
    private String name;
    private String url;

    public ContactInformation() {
    }

    public ContactInformation(Integer id, Integer cvId, String name, String url) {
        this.id = id;
        this.cvId = cvId;
        this.name = name;
        this.url = url;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Integer getCvId() {
        return cvId;
    }

    public void setCvId(Integer cvId) {
        this.cvId = cvId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        ContactInformation that = (ContactInformation) o;
        return Objects.equals(id, that.id) && cvId.equals(that.cvId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, cvId);
    }

    @Override
    public String toString() {
        return "ContactInformation{" +
                "id=" + id +
                ", cvId=" + cvId +
                ", name='" + name + '\'' +
                ", url='" + url + '\'' +
                '}';
    }
}

----

package com.github.tm_425006.webproject.bean;

import java.io.Serializable;
import java.sql.Date;
import java.util.ArrayList;
import java.util.Objects;

public class CV implements Serializable {
    private Integer id;
    private Integer userId;
    private Date createdDate;
    private Date modifiedDate;
    private BasicInformation basicInformation;
    private ArrayList<Language> languages;
    private ArrayList<ContactInformation> contactInformationList;
    private ArrayList<Certificate> certificates;
    private ArrayList<Skill> skills;
    private ArrayList<Interest> interests;
    private ArrayList<Project> projects;
    private ArrayList<WorkExperience> workExperiences;
    private ArrayList<Education> educations;

    public CV() {
        this.certificates = new ArrayList<>();
        this.educations = new ArrayList<>();
        this.contactInformationList = new ArrayList<>();
        this.languages = new ArrayList<>();
        this.interests = new ArrayList<>();
        this.projects = new ArrayList<>();
        this.workExperiences = new ArrayList<>();
        this.skills = new ArrayList<>();
    }

    public CV(Integer id, Integer userId, BasicInformation basicInformation, Date createdDate,
              Date modifiedDate, ArrayList<Language> languages, ArrayList<ContactInformation> contactInformationArrayList,
              ArrayList<Certificate> certificates, ArrayList<Skill> skills, ArrayList<Interest> interests, ArrayList<Project> projects,
              ArrayList<WorkExperience> workExperiences, ArrayList<Education> educations) {
        this.id = id;
        this.userId = userId;
        this.basicInformation = basicInformation;
        this.createdDate = createdDate;
        this.modifiedDate = modifiedDate;
        this.languages = languages;
        this.contactInformationList = contactInformationList;
        this.certificates = certificates;
        this.skills = skills;
        this.interests = interests;
        this.projects = projects;
        this.workExperiences = workExperiences;
        this.educations = educations;
    }


    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Date getCreatedDate() {
        return createdDate;
    }

    public void setCreatedDate(Date createdDate) {
        this.createdDate = createdDate;
    }

    public Date getModifiedDate() {
        return modifiedDate;
    }

    public void setModifiedDate(Date modifiedDate) {
        this.modifiedDate = modifiedDate;
    }

    public ArrayList<Language> getLanguages() {
        return languages;
    }

    public void setLanguages(ArrayList<Language> languages) {
        this.languages = languages;
    }

    public ArrayList<Certificate> getCertificates() {
        return certificates;
    }

    public void setCertificates(ArrayList<Certificate> certificates) {
        this.certificates = certificates;
    }

    public ArrayList<Skill> getSkills() {
        return skills;
    }

    public void setSkills(ArrayList<Skill> skills) {
        this.skills = skills;
    }

    public ArrayList<Interest> getInterests() {
        return interests;
    }

    public void setInterests(ArrayList<Interest> interests) {
        this.interests = interests;
    }

    public ArrayList<Project> getProjects() {
        return projects;
    }

    public void setProjects(ArrayList<Project> projects) {
        this.projects = projects;
    }

    public ArrayList<WorkExperience> getWorkExperiences() {
        return workExperiences;
    }

    public void setWorkExperiences(ArrayList<WorkExperience> workExperiences) {
        this.workExperiences = workExperiences;
    }

    public ArrayList<Education> getEducations() {
        return educations;
    }

    public void setEducations(ArrayList<Education> educations) {
        this.educations = educations;
    }

    public ArrayList<ContactInformation> getContactInformationList() {
        return contactInformationList;
    }

    public void setContactInformationList(ArrayList<ContactInformation> contactInformationList) {
        this.contactInformationList = contactInformationList;
    }

    public Integer getUserId() {
        return userId;
    }

    public void setUserId(Integer userId) {
        this.userId = userId;
    }

    public BasicInformation getBasicInformation() {
        return basicInformation;
    }

    public void setBasicInformation(BasicInformation basicInformation) {
        this.basicInformation = basicInformation;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        CV cv = (CV) o;
        return Objects.equals(id, cv.id) && userId.equals(cv.userId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, userId);
    }

    @Override
    public String toString() {
        return "CV{" +
                "id=" + id +
                ", userId=" + userId +
                ", createdDate=" + createdDate +
                ", modifiedDate=" + modifiedDate +
                ", basicInformation=" + basicInformation +
                ", languages=" + languages +
                ", contactInformationList=" + contactInformationList +
                ", certificates=" + certificates +
                ", skills=" + skills +
                ", interests=" + interests +
                ", projects=" + projects +
                ", workExperiences=" + workExperiences +
                ", educations=" + educations +
                '}';
    }
}

----

package com.github.tm_425006.webproject.bean;

import java.io.Serializable;
import java.sql.Date;
import java.util.Objects;

public class Education implements Serializable {
    private Integer id;
    private Integer cvId;
    private String name;
    private String institute;
    private Date startDate;
    private Date endDate;
    private String grade;

    public Education() {
    }

    public Education(Integer id, Integer cvId, String name, String institute, Date startDate, Date endDate, String grade) {
        this.id = id;
        this.cvId = cvId;
        this.name = name;
        this.institute = institute;
        this.startDate = startDate;
        this.endDate = endDate;
        this.grade = grade;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Integer getCvId() {
        return cvId;
    }

    public void setCvId(Integer cvId) {
        this.cvId = cvId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getInstitute() {
        return institute;
    }

    public void setInstitute(String institute) {
        this.institute = institute;
    }

    public Date getStartDate() {
        return startDate;
    }

    public void setStartDate(Date startDate) {
        this.startDate = startDate;
    }

    public Date getEndDate() {
        return endDate;
    }

    public void setEndDate(Date endDate) {
        this.endDate = endDate;
    }

    public String getGrade() {
        return grade;
    }

    public void setGrade(String grade) {
        this.grade = grade;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Education education = (Education) o;
        return Objects.equals(id, education.id) && cvId.equals(education.cvId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, cvId);
    }

    @Override
    public String toString() {
        return "Education{" +
                "id=" + id +
                ", cvId=" + cvId +
                ", name='" + name + '\'' +
                ", institute='" + institute + '\'' +
                ", startDate=" + startDate +
                ", endDate=" + endDate +
                ", grade='" + grade + '\'' +
                '}';
    }
}

----

package com.github.tm_425006.webproject.bean;

import java.io.Serializable;
import java.util.Objects;

public class Interest implements Serializable {
    private Integer id;
    private Integer cvId;
    private String name;

    public Interest() {
    }

    public Interest(Integer id, Integer cvId, String name) {
        this.id = id;
        this.cvId = cvId;
        this.name = name;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public Integer getCvId() {
        return cvId;
    }

    public void setCvId(Integer cvId) {
        this.cvId = cvId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Interest interest = (Interest) o;
        return Objects.equals(id, interest.id) && cvId.equals(interest.cvId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, cvId);
    }

    @Override
    public String toString() {
        return "Interest{" +
                "id=" + id +
                ", cvId=" + cvId +
                ", name='" + name + '\'' +
                '}';
    }
}

----

package com.github.tm_425006.webproject.bean;

import java.io.Serializable;
import java.util.Objects;

public class Language implements Serializable {
    private Integer id;
    private Integer cvId;
    private String name;

    public Language() {
    }

    public Language(Integer id, Integer cvId, String name) {
        this.id = id;
        this.cvId = cvId;
        this.name = name;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public Integer getCvId() {
        return cvId;
    }

    public void setCvId(Integer cvId) {
        this.cvId = cvId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Language language = (Language) o;
        return Objects.equals(id, language.id) && cvId.equals(language.cvId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, cvId);
    }

    @Override
    public String toString() {
        return "Language{" +
                "id=" + id +
                ", cvId=" + cvId +
                ", name='" + name + '\'' +
                '}';
    }
}

----

package com.github.tm_425006.webproject.bean;

import java.io.Serializable;
import java.util.Objects;

public class Project implements Serializable {
    private Integer id;
    private Integer cvId;
    private String name;
    private String details;

    public Project() {
    }

    public Project(Integer id, Integer cvId, String name, String details) {
        this.id = id;
        this.cvId = cvId;
        this.name = name;
        this.details = details;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Integer getCvId() {
        return cvId;
    }

    public void setCvId(Integer cvId) {
        this.cvId = cvId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDetails() {
        return details;
    }

    public void setDetails(String details) {
        this.details = details;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Project project = (Project) o;
        return Objects.equals(id, project.id) && cvId.equals(project.cvId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, cvId);
    }

    @Override
    public String toString() {
        return "Project{" +
                "id=" + id +
                ", cvId=" + cvId +
                ", name='" + name + '\'' +
                ", details='" + details + '\'' +
                '}';
    }
}

----

package com.github.tm_425006.webproject.bean;

import java.io.Serializable;
import java.util.Objects;

public class Skill implements Serializable {
    private Integer id;
    private Integer cvId;
    private String name;

    public Skill() {
    }

    public Skill(Integer id, Integer cvId, String name) {
        this.id = id;
        this.cvId = cvId;
        this.name = name;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public Integer getCvId() {
        return cvId;
    }

    public void setCvId(Integer cvId) {
        this.cvId = cvId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Skill skill = (Skill) o;
        return Objects.equals(id, skill.id) && cvId.equals(skill.cvId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, cvId);
    }

    @Override
    public String toString() {
        return "Skill{" +
                "id=" + id +
                ", cvId=" + cvId +
                ", name='" + name + '\'' +
                '}';
    }
}

----

package com.github.tm_425006.webproject.bean;

import java.io.Serializable;
import java.sql.Date;
import java.util.Objects;

public class User implements Serializable {
    private Integer id;
    private String firstName;
    private String lastName;
    private Date birthDate;
    private String email;
    private String password;
    private String address;
    public User() {
    }

    public User(String firstName, String lastName, Date birthDate, String email,
                String password, String address) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.birthDate = birthDate;
        this.email = email;
        this.password = password;
        this.address = address;
    }

    public User(Integer userId, String firstName, String lastName, Date birthDate, String email,
                String password, String address) {
        this.id = userId;
        this.firstName = firstName;
        this.lastName = lastName;
        this.birthDate = birthDate;
        this.email = email;
        this.password = password;
        this.address = address;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public Date getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(Date birthDate) {
        this.birthDate = birthDate;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        User user = (User) o;
        return Objects.equals(id, user.id) && Objects.equals(firstName, user.firstName) &&
                Objects.equals(lastName, user.lastName) && Objects.equals(birthDate, user.birthDate) &&
                Objects.equals(email, user.email) && Objects.equals(password, user.password) &&
                Objects.equals(address, user.address);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, firstName, lastName, birthDate, email, password, address);
    }

    @Override
    public String toString() {
        return "User{" +
                "id=" + id +
                ", firstName='" + firstName + '\'' +
                ", lastName='" + lastName + '\'' +
                ", birthDate=" + birthDate +
                ", email='" + email + '\'' +
                ", password='" + password + '\'' +
                ", address='" + address + '\'' +
                '}';
    }
}

----

package com.github.tm_425006.webproject.bean;

import java.io.Serializable;
import java.sql.Date;
import java.util.Objects;

public class WorkExperience implements Serializable {
    private Integer id;
    private Integer cvId;
    private String role;
    private String institute;
    private Date startDate;
    private Date endDate;
    private String details;

    public WorkExperience() {
    }

    public WorkExperience(Integer id, Integer cvId, String role, String institute,
                          Date startDate, Date endDate, String details) {
        this.id = id;
        this.cvId = cvId;
        this.role = role;
        this.institute = institute;
        this.startDate = startDate;
        this.endDate = endDate;
        this.details = details;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Integer getCvId() {
        return cvId;
    }

    public void setCvId(Integer cvId) {
        this.cvId = cvId;
    }

    public String getRole() {
        return role;
    }

    public void setRole(String role) {
        this.role = role;
    }

    public String getInstitute() {
        return institute;
    }

    public void setInstitute(String institute) {
        this.institute = institute;
    }

    public Date getStartDate() {
        return startDate;
    }

    public void setStartDate(Date startDate) {
        this.startDate = startDate;
    }

    public Date getEndDate() {
        return endDate;
    }

    public void setEndDate(Date endDate) {
        this.endDate = endDate;
    }

    public String getDetails() {
        return details;
    }

    public void setDetails(String details) {
        this.details = details;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        WorkExperience that = (WorkExperience) o;
        return Objects.equals(id, that.id) && cvId.equals(that.cvId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, cvId);
    }

    @Override
    public String toString() {
        return "WorkExperience{" +
                "id=" + id +
                ", cvId=" + cvId +
                ", role='" + role + '\'' +
                ", institute='" + institute + '\'' +
                ", startDate=" + startDate +
                ", endDate=" + endDate +
                ", details='" + details + '\'' +
                '}';
    }
}

----

package com.github.tm_425006.webproject.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;
import java.util.Locale;

public class ControllerUtils {
    public static boolean validateAction(HttpServletRequest request, HttpServletResponse response,
                                         List<String> supportedActions) throws IOException {
        if (!request.getParameterMap().containsKey("action")) {
            response.sendRedirect("error.jsp?error=No action specified");
            return false;
        }
        String action = request.getParameter("action").trim().toLowerCase(Locale.ROOT);
        boolean actionSupported = false;
        for (String supportedAction : supportedActions) {
            if (action.equalsIgnoreCase(supportedAction)) {
                actionSupported = true;
                break;
            }
        }
        if (!actionSupported) {
            response.sendRedirect("error.jsp?error=Invalid action");
            return false;
        }
        return true;
    }
}

----

package com.github.tm_425006.webproject.controller;

import com.github.tm_425006.webproject.CVGenerator;
import com.github.tm_425006.webproject.SessionUtils;
import com.github.tm_425006.webproject.bean.BeanUtils;
import com.github.tm_425006.webproject.bean.CV;
import com.github.tm_425006.webproject.bean.User;
import com.github.tm_425006.webproject.exception.CVGeneratorException;
import com.github.tm_425006.webproject.model.CVDAO;
import com.github.tm_425006.webproject.Utils;
import com.github.tm_425006.webproject.service.CVService;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.nio.file.FileSystems;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;

public class CVController extends HttpServlet {

    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        if (!ControllerUtils.validateAction(request, response, List.of("getall", "delete", "edit",
                "save", "preview", "download")))
            return;
        if (!SessionUtils.verifySession(request, response))
            return;
        try {
            this.handleRequest(request, response);
        } catch (SQLException | CVGeneratorException | ClassNotFoundException e) {
            request.setAttribute("exception", e);
            request.getRequestDispatcher("error.jsp").forward(request, response);
        }
    }

    public void handleRequest(HttpServletRequest request, HttpServletResponse response) throws SQLException, CVGeneratorException, ClassNotFoundException, ServletException, IOException {
        switch (request.getParameter("action").trim().toLowerCase(Locale.ROOT)) {
            case "getall" -> {
                this.handleGetAll(request, response);
            }
            case "delete" -> {
                this.handleDelete(request, response);
            }
            case "edit" -> {
                this.handleEdit(request, response);
            }
            case "save" -> {
                this.handleSave(request, response);
            }
            case "preview" -> {
                this.handlePreview(request, response);
            }
            case "download" -> {
                this.handleDownload(request, response);
            }
        }
    }

    public void handleGetAll(HttpServletRequest request, HttpServletResponse response) throws SQLException, CVGeneratorException, ClassNotFoundException, ServletException, IOException {
        CVDAO cvdao = new CVDAO(Utils.servletContextToProperties(this.getServletContext()));
        ArrayList<CV> cvList = cvdao.getAll(((User)request.getSession().getAttribute("user")).getId());
        request.setAttribute("cvList", cvList);
        request.getRequestDispatcher("index.jsp").forward(request, response);
    }

    public void handleDelete(HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, CVGeneratorException, ClassNotFoundException, ServletException {
        if (!new CVControllerRequestValidator().validateId(request, response))
            return;
        CVDAO cvdao = new CVDAO(Utils.servletContextToProperties(this.getServletContext()));
        CV cv = BeanUtils.createCV(request.getParameterMap());
        cvdao.delete(cv);
        this.handleGetAll(request, response);
    }

    public void handleEdit(HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, CVGeneratorException, ClassNotFoundException, ServletException {
        if (!new CVControllerRequestValidator().validateId(request, response))
            return;
        CVService cvService = new CVService(Utils.servletContextToProperties(this.getServletContext()));
        CV cv = cvService.get(Integer.parseInt(request.getParameter("id").trim()));
        request.setAttribute("cv", cv);
        request.getRequestDispatcher("cv.jsp").forward(request, response);
    }

    public void handleSave(HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, CVGeneratorException, ClassNotFoundException, ServletException {
        Properties dbProperties = Utils.servletContextToProperties(this.getServletContext());
        CVService cvService = new CVService(dbProperties);
        CV cv = BeanUtils.createCV(request.getParameterMap());
        Integer cvId = cv.getId();
        if (cv.getId() == -1)
            cvId = cvService.insert(cv);
        else {
            // getting created date as it is not saved in hidden field
            cv.setCreatedDate(new CVDAO(dbProperties).get(cv.getId()).getCreatedDate());
            cvService.update(cv);
        }
        cv = cvService.get(cvId);
        request.setAttribute("cv", cv);
        request.getRequestDispatcher("cv.jsp?success=Saved successfully").forward(request, response);
    }

    public void handlePreview(HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, CVGeneratorException, ClassNotFoundException, ServletException {
        if (!new CVControllerRequestValidator().validateId(request, response))
            return;
        CVService cvService = new CVService(Utils.servletContextToProperties(this.getServletContext()));
        CV cv = cvService.get(Integer.parseInt(request.getParameter("id").trim()));
        String generatedPreview = new CVGenerator(cv).generateHTML();
        request.setAttribute("preview", generatedPreview);
        request.getRequestDispatcher("preview.jsp").forward(request, response);
    }

    public void handleDownload(HttpServletRequest request, HttpServletResponse response) throws SQLException, CVGeneratorException, ClassNotFoundException, IOException {
        if (!new CVControllerRequestValidator().validateId(request, response))
            return;
        CVService cvService = new CVService(Utils.servletContextToProperties(this.getServletContext()));
        CV cv = cvService.get(Integer.parseInt(request.getParameter("id").trim()));
        User user = (User) request.getSession().getAttribute("user");

        byte[] generatedPDF = new CVGenerator(cv).generatePDF(
                this.getServletContext().getRealPath("/").concat("WEB-INF"));

        response.setContentType("application/pdf");
        response.setHeader("Content-disposition", String.format("attachment; filename=%s's CV.pdf",
                user.getFirstName()));

        OutputStream outputStream = response.getOutputStream();
        outputStream.write(generatedPDF);
        outputStream.close();
    }

}
----

package com.github.tm_425006.webproject.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;
import java.util.Locale;
import java.util.regex.Pattern;

public class CVControllerRequestValidator {

    public boolean validateId(HttpServletRequest request, HttpServletResponse response) throws IOException {
            String param = request.getParameter("id");
            if (param == null) {
                response.sendRedirect("index.jsp?error=Id parameter not found");
                return false;
            } else if (param.trim().isEmpty()) {
                response.sendRedirect("index.jsp?error=Id empty");
                return false;
            }
        return true;
    }

}
----

package com.github.tm_425006.webproject.controller;

import com.github.tm_425006.webproject.SessionUtils;
import com.github.tm_425006.webproject.Utils;
import com.github.tm_425006.webproject.bean.BeanUtils;
import com.github.tm_425006.webproject.bean.CV;
import com.github.tm_425006.webproject.bean.User;
import com.github.tm_425006.webproject.exception.CVGeneratorException;
import com.github.tm_425006.webproject.model.CVDAO;
import com.github.tm_425006.webproject.model.UserDAO;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import java.util.Locale;
import java.util.Properties;

public class UserController extends HttpServlet {

    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        if (!ControllerUtils.validateAction(request, response, List.of("login", "signup", "logout", "updateaccount",
                "changepassword")))
            return;
        if (!request.getParameter("action").trim().equalsIgnoreCase("login") &&
                !request.getParameter("action").trim().equalsIgnoreCase("signup") &&
                !SessionUtils.verifySession(request, response))
            return;
        try {
            this.handleRequest(request, response);
        } catch (SQLException | ClassNotFoundException | CVGeneratorException e) {
            request.setAttribute("exception", e);
            request.getRequestDispatcher("error.jsp").forward(request, response);
        }
    }

    public void handleRequest(HttpServletRequest request, HttpServletResponse response) throws SQLException, CVGeneratorException, ClassNotFoundException, ServletException, IOException {
        switch (request.getParameter("action").trim().toLowerCase(Locale.ROOT)) {
            case "login" -> {
                this.handleLogin(request, response);
            }
            case "signup" -> {
                this.handleSignup(request, response);
            }
            case "logout" -> {
                this.handleLogout(request, response);
            }
            case "updateaccount" -> {
                this.handleUpdateAccount(request, response);
            }
            case "changepassword" -> {
                this.handleChangePassword(request, response);
            }
        }
    }

        public void handleLogin(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException, ClassNotFoundException, CVGeneratorException {
        if (!new UserControllerRequestValidator().validateLogin(request, response))
            return;
        Properties dbProperties = Utils.servletContextToProperties(this.getServletContext());
        UserDAO userDAO = new UserDAO(dbProperties);
        User user = userDAO.get(request.getParameter("email").trim());
        if (user == null || !user.getPassword().equals(request.getParameter("password"))) {
            response.sendRedirect("login.jsp?error=incorrect email/password");
            return;
        }
        HttpSession session = request.getSession(true);
        session.setAttribute("user", user);
        request.getRequestDispatcher("cvcontroller?action=getAll").forward(request, response);
    }

    public void handleSignup(HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, ClassNotFoundException, CVGeneratorException, ServletException {
        if (!new UserControllerRequestValidator().validateSignup(request, response))
            return;

        User user = BeanUtils.createUser(request.getParameterMap());
        UserDAO userDAO = new UserDAO(Utils.servletContextToProperties(this.getServletContext()));
        if (userDAO.get(user.getEmail()) != null) {
            response.sendRedirect("signup.jsp?error=Email already in use");
        } else {
            userDAO.insert(user);
            response.sendRedirect("signup.jsp?success=Successfully registered");
        }
    }

    public void handleLogout(HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, ClassNotFoundException, CVGeneratorException, ServletException {
        HttpSession session = request.getSession(false);
        if (session != null)
            session.invalidate();
        response.sendRedirect("login.jsp");
    }

    public void handleUpdateAccount(HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, ClassNotFoundException, CVGeneratorException, ServletException {
        if (!new UserControllerRequestValidator().validateUpdateAccount(request, response))
            return;

        User user = BeanUtils.createUser(request.getParameterMap());
        User sessionUser = (User)request.getSession().getAttribute("user");
        if (!user.getPassword().equals(sessionUser.getPassword())) {
            response.sendRedirect("updateaccount.jsp?error=Incorrect password");
            return;
        }
        user.setId(sessionUser.getId());
        UserDAO userDAO = new UserDAO(Utils.servletContextToProperties(this.getServletContext()));
        userDAO.update(user);
        request.getSession().setAttribute("user", user);
        response.sendRedirect("updateaccount.jsp?success=Account updated successfully");
    }

    public void handleChangePassword(HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, ClassNotFoundException, CVGeneratorException, ServletException {
        if (!new UserControllerRequestValidator().validateChangePassword(request, response))
            return;

        User user = (User)request.getSession().getAttribute("user");
        if (!user.getPassword().equals(request.getParameter("currentPassword").trim())) {
            response.sendRedirect("changepassword.jsp?error=Incorrect current password");
            return;
        }
        user.setPassword(request.getParameter("newPassword").trim());
        UserDAO userDAO = new UserDAO(Utils.servletContextToProperties(this.getServletContext()));
        userDAO.update(user);
        request.getSession().setAttribute("user", user);
        response.sendRedirect("changepassword.jsp?success=Password changed successfully");
    }

}
----

package com.github.tm_425006.webproject.controller;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.regex.Pattern;

public class UserControllerRequestValidator {

    public boolean validateLogin(HttpServletRequest request, HttpServletResponse response) throws IOException {
        List<String> requiredParameters = List.of("email", "password");
        for (String parameter : requiredParameters) {
            String param = request.getParameter(parameter);
            if (param == null) {
                response.sendRedirect("login.jsp?error=" + parameter + " parameter not found");
                return false;
            } else if (param.trim().isEmpty()) {
                response.sendRedirect("login.jsp?error=" + parameter + " empty");
                return false;
            }
        }
        if (!Pattern.compile("^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$", Pattern.CASE_INSENSITIVE)
                .matcher(request.getParameter("email").trim()).matches()) {
            response.sendRedirect("login.jsp?error=Email not correct");
            return false;
        }
        return true;
    }

    public boolean validateSignup(HttpServletRequest request, HttpServletResponse response) throws IOException {
        List<String> requiredParameters = List.of("id", "firstName", "lastName", "email", "birthDate",
                "password", "confirmPassword", "address");

        for (String parameter : requiredParameters) {
            String param = request.getParameter(parameter);
            if (param == null) {
                response.sendRedirect("signup.jsp?error=" + parameter + " parameter not found");
                return false;
            } else if (param.trim().isEmpty()) {
                response.sendRedirect("signup.jsp?error=" + parameter + " empty");
                return false;
            }
        }
        if (!Pattern.compile("^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$", Pattern.CASE_INSENSITIVE)
                .matcher(request.getParameter("email").trim()).matches()) {
            response.sendRedirect("signup.jsp?error=Invalid email format");
            return false;
        } else if (!Pattern.compile("^\\d{4}-\\d{2}-\\d{2}$", Pattern.CASE_INSENSITIVE)
                .matcher(request.getParameter("birthDate").trim()).matches()) {
            response.sendRedirect("signup.jsp?error=Invalid date of birth format");
            return false;
        } else if (!request.getParameter("password").trim().equals(
                request.getParameter("confirmPassword").trim())) {
            response.sendRedirect("signup.jsp?error=Password and confirm password do not match");
            return false;
        }
        return true;
    }

    public boolean validateUpdateAccount(HttpServletRequest request, HttpServletResponse response) throws IOException {
        List<String> requiredParameters = List.of("firstName", "lastName", "email", "birthDate",
                "password", "address");

        for (String parameter : requiredParameters) {
            String param = request.getParameter(parameter);
            if (param == null) {
                response.sendRedirect("updateaccount.jsp?error=" + parameter + " parameter not found");
                return false;
            } else if (param.trim().isEmpty()) {
                response.sendRedirect("updateaccount.jsp?error=" + parameter + " empty");
                return false;
            }
        }
        if (!Pattern.compile("^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$", Pattern.CASE_INSENSITIVE)
                .matcher(request.getParameter("email").trim()).matches()) {
            response.sendRedirect("updateaccount.jsp?error=Invalid email format");
            return false;
        } else if (!Pattern.compile("^\\d{4}-\\d{2}-\\d{2}$", Pattern.CASE_INSENSITIVE)
                .matcher(request.getParameter("birthDate").trim()).matches()) {
            response.sendRedirect("updateaccount.jsp?error=Invalid date of birth format");
            return false;
        }
        return true;
    }

    public boolean validateChangePassword(HttpServletRequest request, HttpServletResponse response) throws IOException {
        List<String> requiredParameters = List.of("currentPassword", "newPassword", "confirmPassword");

        for (String parameter : requiredParameters) {
            String param = request.getParameter(parameter);
            if (param == null) {
                response.sendRedirect("changepassword.jsp?error=" + parameter + " parameter not found");
                return false;
            } else if (param.trim().isEmpty()) {
                response.sendRedirect("changepassword.jsp?error=" + parameter + " empty");
                return false;
            }
        }

        if (!request.getParameter("newPassword").trim().equals(
                request.getParameter("confirmPassword").trim())) {
            response.sendRedirect("changepassword.jsp?error=New password and confirm password do not match");
            return false;
        }

        return true;
    }

}
----

package com.github.tm_425006.webproject.exception;

public class CVGeneratorException extends Exception {
    public CVGeneratorException() {
    }

    public CVGeneratorException(Throwable cause) {
        super(cause);
    }

    public CVGeneratorException(String message) {
        super(message);
    }

    @Override
    public String toString() {
        return String.format("CVGeneratorException{ %s }", this.getMessage());
    }
}

----

package com.github.tm_425006.webproject.exception;

public class NotImplementedException extends CVGeneratorException {
    public NotImplementedException() {
    }

    public NotImplementedException(Throwable cause) {
        super(cause);
    }

    public NotImplementedException(String message) {
        super(message);
    }

    @Override
    public String toString() {
        return "NotImplementedException{ " + this.getMessage() + " }";
    }
}

----

package com.github.tm_425006.webproject.model;

import com.github.tm_425006.webproject.exception.CVGeneratorException;
import com.github.tm_425006.webproject.bean.BasicInformation;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

public class BasicInformationDAO implements DAO<BasicInformation> {
    private final Properties dbProperties;

    public BasicInformationDAO(Properties dbProperties) {
        this.dbProperties = dbProperties;
    }

    public BasicInformation get(int cvId) throws SQLException, ClassNotFoundException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement userQuery = connection.prepareStatement(
                    "select * from basic_information where cv_id = ( ? )"
            );
            userQuery.setInt(1, cvId);
            ResultSet resultSet = userQuery.executeQuery();
            if (resultSet.next()) {
                return new BasicInformation(resultSet.getInt("id"), cvId,
                        resultSet.getString("name"), resultSet.getString("address"),
                        resultSet.getDate("birth_date"));
            }
            return null;
        }
    }

    public Integer insert(BasicInformation basicInformation) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "insert into basic_information (cv_id, name, address, birth_date) " +
                            "values (?, ?, ?, ?)"
            );
            preparedStatement.setInt(1, basicInformation.getCvId());
            preparedStatement.setString(2, basicInformation.getName());
            preparedStatement.setString(3, basicInformation.getAddress());
            preparedStatement.setDate(4, basicInformation.getBirthDate());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not insert BasicInformation: " + basicInformation);
            preparedStatement.close();
            ResultSet resultSet = connection.createStatement().executeQuery("select last_insert_id()");
            resultSet.next();
            return resultSet.getInt(1);
        }
    }

    public void update(BasicInformation basicInformation) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "update basic_information set " +
                            "name = ( ? ), " +
                            "address = ( ? ), " +
                            "birth_date = ( ? ) " +
                            "where id = ( ? )"
            );
            preparedStatement.setString(1, basicInformation.getName());
            preparedStatement.setString(2, basicInformation.getAddress());
            preparedStatement.setDate(3, basicInformation.getBirthDate());
            preparedStatement.setInt(4, basicInformation.getId());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not update BasicInformation: " + basicInformation);
            preparedStatement.close();
        }
    }

    public void delete(BasicInformation basicInformation) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "delete from basic_information where id = ( ? )"
            );
            preparedStatement.setInt(1, basicInformation.getId());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not delete BasicInformation: " + basicInformation);
            preparedStatement.close();
        }
    }

    private Properties getDBProperties() {
        return dbProperties;
    }
}

----

package com.github.tm_425006.webproject.model;

import com.github.tm_425006.webproject.exception.CVGeneratorException;
import com.github.tm_425006.webproject.bean.Certificate;

import java.sql.*;
import java.util.ArrayList;
import java.util.Properties;

public class CertificateDAO implements DAO<Certificate> {
    private final Properties dbProperties;

    public CertificateDAO(Properties dbProperties) {
        this.dbProperties = dbProperties;
    }

    public Certificate get(int id) throws SQLException, ClassNotFoundException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement userQuery = connection.prepareStatement(
                    "select * from certificate where id = ( ? )"
            );
            userQuery.setInt(1, id);
            ResultSet resultSet = userQuery.executeQuery();
            if (resultSet.next()) {
                return new Certificate(id, resultSet.getInt("cv_id"),
                        resultSet.getString("name"), resultSet.getString("institute"),
                        resultSet.getDate("completion_date"));
            }
            return null;
        }
    }

    public ArrayList<Certificate> getAll(int cvId) throws SQLException, ClassNotFoundException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement userQuery = connection.prepareStatement(
                    "select * from certificate where cv_id = ( ? )"
            );
            userQuery.setInt(1, cvId);
            ResultSet resultSet = userQuery.executeQuery();
            ArrayList<Certificate> list = new ArrayList<>();
            while (resultSet.next()) {
                list.add(new Certificate(resultSet.getInt("id"), cvId,
                        resultSet.getString("name"), resultSet.getString("institute"),
                        resultSet.getDate("completion_date")));
            }
            return list;
        }
    }

    public Integer insert(Certificate certificate) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "insert into certificate (cv_id, name, institute, completion_date) " +
                            "values (?, ?, ?, ?)"
            );
            preparedStatement.setInt(1, certificate.getCvId());
            preparedStatement.setString(2, certificate.getName());
            preparedStatement.setString(3, certificate.getInstitute());
            preparedStatement.setDate(4, certificate.getCompletionDate());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not insert Certificate: " + certificate);
            preparedStatement.close();
            ResultSet resultSet = connection.createStatement().executeQuery("select last_insert_id()");
            resultSet.next();
            return resultSet.getInt(1);
        }
    }

    public void update(Certificate certificate) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "update certificate set " +
                            "name = ( ? ), " +
                            "institute = ( ? ), " +
                            "completion_date = ( ? ) " +
                            "where id = ( ? )"
            );
            preparedStatement.setString(1, certificate.getName());
            preparedStatement.setString(2, certificate.getInstitute());
            preparedStatement.setDate(3, certificate.getCompletionDate());
            preparedStatement.setInt(4, certificate.getId());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not update Certificate: " + certificate);
            preparedStatement.close();
        }
    }

    public void delete(Certificate certificate) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "delete from certificate where id = ( ? )"
            );
            preparedStatement.setInt(1, certificate.getId());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not delete Certificate: " + certificate);
            preparedStatement.close();
        }
    }

    private Properties getDBProperties() {
        return dbProperties;
    }
}

----

package com.github.tm_425006.webproject.model;

import javax.servlet.ServletContext;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;

public class ConnectionUtils {

    public static Connection getConnection(Properties properties) throws SQLException, ClassNotFoundException {
        Class.forName("com.mysql.cj.jdbc.Driver");
        return DriverManager.getConnection(String.format(
                        "jdbc:mysql://%s:%s/%s", properties.getProperty("db-host").trim(),
                        properties.getProperty("db-port").trim(), properties.getProperty("db-name").trim()),
                properties.getProperty("db-user").trim(), properties.getProperty("db-password").trim());

    }
}

----

package com.github.tm_425006.webproject.model;

import com.github.tm_425006.webproject.exception.CVGeneratorException;
import com.github.tm_425006.webproject.bean.ContactInformation;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Properties;

public class ContactInformationDAO implements DAO<ContactInformation> {
    private final Properties dbProperties;

    public ContactInformationDAO(Properties dbProperties) {
        this.dbProperties = dbProperties;
    }

    public ContactInformation get(int id) throws SQLException, ClassNotFoundException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement userQuery = connection.prepareStatement(
                    "select * from contact_information where id = ( ? )"
            );
            userQuery.setInt(1, id);
            ResultSet resultSet = userQuery.executeQuery();
            if (resultSet.next()) {
                return new ContactInformation(id, resultSet.getInt("cv_id"),
                        resultSet.getString("name"), resultSet.getString("url"));
            }
            return null;
        }
    }

    public ArrayList<ContactInformation> getAll(int cvId) throws SQLException, ClassNotFoundException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement userQuery = connection.prepareStatement(
                    "select * from contact_information where cv_id = ( ? )"
            );
            userQuery.setInt(1, cvId);
            ResultSet resultSet = userQuery.executeQuery();
            ArrayList<ContactInformation> list = new ArrayList<>();
            while (resultSet.next()) {
                list.add(new ContactInformation(resultSet.getInt("id"), cvId,
                        resultSet.getString("name"), resultSet.getString("url")));
            }
            return list;
        }
    }

    public Integer insert(ContactInformation contactInformation) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "insert into contact_information (cv_id, name, url) " +
                            "values (?, ?, ?)"
            );
            preparedStatement.setInt(1, contactInformation.getCvId());
            preparedStatement.setString(2, contactInformation.getName());
            preparedStatement.setString(3, contactInformation.getUrl());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not insert ContactInformation: " + contactInformation);
            preparedStatement.close();
            ResultSet resultSet = connection.createStatement().executeQuery("select last_insert_id()");
            resultSet.next();
            return resultSet.getInt(1);
        }
    }

    public void update(ContactInformation contactInformation) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "update contact_information set " +
                            "name = ( ? ), " +
                            "url = ( ? ) " +
                            "where id = ( ? )"
            );
            preparedStatement.setString(1, contactInformation.getName());
            preparedStatement.setString(2, contactInformation.getUrl());
            preparedStatement.setInt(3, contactInformation.getId());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not update ContactInformation: " + contactInformation);
            preparedStatement.close();
        }
    }

    public void delete(ContactInformation contactInformation) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "delete from contact_information where id = ( ? )"
            );
            preparedStatement.setInt(1, contactInformation.getId());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not delete ContactInformation: " + contactInformation);
            preparedStatement.close();
        }
    }

    private Properties getDBProperties() {
        return dbProperties;
    }
}

----

package com.github.tm_425006.webproject.model;

import com.github.tm_425006.webproject.exception.CVGeneratorException;
import com.github.tm_425006.webproject.bean.CV;

import java.sql.*;
import java.util.ArrayList;
import java.util.Properties;

public class CVDAO implements DAO<CV> {
    private final Properties dbProperties;

    public CVDAO(Properties dbProperties) {
        this.dbProperties = dbProperties;
    }

    public CV get(int id) throws SQLException, ClassNotFoundException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement userQuery = connection.prepareStatement(
                    "select * from cv where id = ( ? )"
            );
            userQuery.setInt(1, id);
            ResultSet resultSet = userQuery.executeQuery();
            if (resultSet.next()) {
                CV cv = new CV();
                cv.setId(id);
                cv.setUserId(resultSet.getInt("user_id"));
                cv.setCreatedDate(resultSet.getDate("created_date"));
                cv.setModifiedDate(resultSet.getDate("modified_date"));
                return cv;
            }
            return null;
        }
    }

    public ArrayList<CV> getAll(int userId) throws SQLException, ClassNotFoundException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement userQuery = connection.prepareStatement(
                    "select * from cv where user_id = ( ? )"
            );
            userQuery.setInt(1, userId);
            ResultSet resultSet = userQuery.executeQuery();
            ArrayList<CV> list = new ArrayList<>();
            while (resultSet.next()) {
                CV cv = new CV();
                cv.setId(resultSet.getInt("id"));
                cv.setUserId(userId);
                cv.setCreatedDate(resultSet.getDate("created_date"));
                cv.setModifiedDate(resultSet.getDate("modified_date"));
                list.add(cv);
            }
            return list;
        }
    }

    public Integer insert(CV cv) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "insert into cv (user_id, created_date, modified_date) " +
                            "values (?, ?, ?)"
            );
            preparedStatement.setInt(1, cv.getUserId());
            preparedStatement.setDate(2, new java.sql.Date(new java.util.Date().getTime()));
            preparedStatement.setDate(3, cv.getModifiedDate());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not insert CV: " + cv);
            preparedStatement.close();
            ResultSet resultSet = connection.createStatement().executeQuery("select last_insert_id()");
            resultSet.next();
            return resultSet.getInt(1);
        }
    }

    public void update(CV cv) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "update cv set " +
                            "created_date = ( ? ), " +
                            "modified_date = ( ? ) " +
                            "where id = ( ? )"
            );
            preparedStatement.setDate(1, cv.getCreatedDate());
            preparedStatement.setDate(2, new java.sql.Date(new java.util.Date().getTime()));
            preparedStatement.setInt(3, cv.getId());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not update CV: " + cv);
            preparedStatement.close();
        }
    }

    public void delete(CV cv) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "delete from cv where id = ( ? )"
            );
            preparedStatement.setInt(1, cv.getId());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not delete CV: " + cv);
            preparedStatement.close();
        }
    }

    private Properties getDBProperties() {
        return dbProperties;
    }
}

----

package com.github.tm_425006.webproject.model;

import com.github.tm_425006.webproject.exception.CVGeneratorException;
import com.github.tm_425006.webproject.exception.NotImplementedException;

import java.sql.SQLException;
import java.util.ArrayList;

public interface DAO<T> {
    default T get(int i) throws SQLException, ClassNotFoundException, CVGeneratorException {
        throw new NotImplementedException();
    }
    default T get(String s) throws SQLException, ClassNotFoundException, CVGeneratorException {
        throw new NotImplementedException();
    }
    default ArrayList<T> getAll() throws SQLException, ClassNotFoundException, CVGeneratorException {
        throw new NotImplementedException();
    }
    default ArrayList<T> getAll(int i) throws SQLException, ClassNotFoundException, CVGeneratorException {
        throw new NotImplementedException();
    }
    default ArrayList<T> getAll(String s) throws SQLException, ClassNotFoundException, CVGeneratorException {
        throw new NotImplementedException();
    }
    Integer insert(T t) throws SQLException, ClassNotFoundException, CVGeneratorException;
    void update(T t) throws SQLException, ClassNotFoundException, CVGeneratorException;
    void delete(T t) throws SQLException, ClassNotFoundException, CVGeneratorException;
}

----

package com.github.tm_425006.webproject.model;

import com.github.tm_425006.webproject.exception.CVGeneratorException;
import com.github.tm_425006.webproject.bean.Education;

import java.sql.*;
import java.util.ArrayList;
import java.util.Properties;

public class EducationDAO implements DAO<Education>{
    private final Properties dbProperties;

    public EducationDAO(Properties dbProperties) {
        this.dbProperties = dbProperties;
    }

    public Education get(int id) throws SQLException, ClassNotFoundException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement userQuery = connection.prepareStatement(
                    "select * from education where id = ( ? )"
            );
            userQuery.setInt(1, id);
            ResultSet resultSet = userQuery.executeQuery();
            if (resultSet.next()) {
                return new Education(id, resultSet.getInt("cv_id"),
                        resultSet.getString("name"), resultSet.getString("institute"),
                        resultSet.getDate("start_date"), resultSet.getDate("end_date"),
                        resultSet.getString("grade"));
            }
            return null;
        }
    }

    public ArrayList<Education> getAll(int cvId) throws SQLException, ClassNotFoundException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement userQuery = connection.prepareStatement(
                    "select * from education where cv_id = ( ? )"
            );
            userQuery.setInt(1, cvId);
            ResultSet resultSet = userQuery.executeQuery();
            ArrayList<Education> list = new ArrayList<>();
            while (resultSet.next()) {
                list.add(new Education(resultSet.getInt("id"), cvId,
                        resultSet.getString("name"), resultSet.getString("institute"),
                        resultSet.getDate("start_date"), resultSet.getDate("end_date"),
                        resultSet.getString("grade")));
            }
            return list;
        }
    }

    public Integer insert(Education education) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "insert into education (cv_id, name, institute, start_date, end_date, grade) " +
                            "values (?, ?, ?, ?, ?, ?)"
            );
            preparedStatement.setInt(1, education.getCvId());
            preparedStatement.setString(2, education.getName());
            preparedStatement.setString(3, education.getInstitute());
            preparedStatement.setDate(4, education.getStartDate());
            if (education.getEndDate() != null)
                preparedStatement.setDate(5, education.getEndDate());
            else
                preparedStatement.setNull(5, Types.DATE);
            preparedStatement.setString(6, education.getGrade());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not insert Education: " + education);
            preparedStatement.close();
            ResultSet resultSet = connection.createStatement().executeQuery("select last_insert_id()");
            resultSet.next();
            return resultSet.getInt(1);
        }
    }

    public void update(Education education) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "update education set " +
                            "name = ( ? ), " +
                            "institute = ( ? ), " +
                            "start_date = ( ? ), " +
                            "end_date = ( ? ), " +
                            "grade = ( ? ) " +
                            "where id = ( ? )"
            );
            preparedStatement.setString(1, education.getName());
            preparedStatement.setString(2, education.getInstitute());
            preparedStatement.setDate(3, education.getStartDate());
            if (education.getEndDate() != null)
                preparedStatement.setDate(4, education.getEndDate());
            else
                preparedStatement.setNull(4, Types.DATE);
            preparedStatement.setString(5, education.getGrade());
            preparedStatement.setInt(6, education.getId());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not update Education: " + education);
            preparedStatement.close();
        }
    }

    public void delete(Education education) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "delete from education where id = ( ? )"
            );
            preparedStatement.setInt(1, education.getId());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not delete Education: " + education);
            preparedStatement.close();
        }
    }

    private Properties getDBProperties() {
        return dbProperties;
    }
}

----

package com.github.tm_425006.webproject.model;

import com.github.tm_425006.webproject.exception.CVGeneratorException;
import com.github.tm_425006.webproject.bean.Interest;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Properties;

public class InterestDAO implements DAO<Interest> {
    private final Properties dbProperties;

    public InterestDAO(Properties dbProperties) {
        this.dbProperties = dbProperties;
    }

    public Interest get(int id) throws SQLException, ClassNotFoundException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement userQuery = connection.prepareStatement(
                    "select * from interest where id = ( ? )"
            );
            userQuery.setInt(1, id);
            ResultSet resultSet = userQuery.executeQuery();
            if (resultSet.next()) {
                return new Interest(id, resultSet.getInt("cv_id"),
                        resultSet.getString("name"));
            }
            return null;
        }
    }

    public ArrayList<Interest> getAll(int cvId) throws SQLException, ClassNotFoundException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement userQuery = connection.prepareStatement(
                    "select * from interest where cv_id = ( ? )"
            );
            userQuery.setInt(1, cvId);
            ResultSet resultSet = userQuery.executeQuery();
            ArrayList<Interest> list = new ArrayList<>();
            while (resultSet.next()) {
                list.add(new Interest(resultSet.getInt("id"), cvId,
                        resultSet.getString("name")));
            }
            return list;
        }
    }

    public Integer insert(Interest interest) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "insert into interest (cv_id, name) " +
                            "values (?, ?)"
            );
            preparedStatement.setInt(1, interest.getCvId());
            preparedStatement.setString(2, interest.getName());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not insert Interest: " + interest);
            preparedStatement.close();
            ResultSet resultSet = connection.createStatement().executeQuery("select last_insert_id()");
            resultSet.next();
            return resultSet.getInt(1);
        }
    }

    public void update(Interest interest) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "update interest set " +
                            "name = ( ? ) " +
                            "where id = ( ? )"
            );
            preparedStatement.setString(1, interest.getName());
            preparedStatement.setInt(2, interest.getId());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not update Interest: " + interest);
            preparedStatement.close();
        }
    }

    public void delete(Interest interest) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "delete from interest where id = ( ? )"
            );
            preparedStatement.setInt(1, interest.getId());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not delete Interest: " + interest);
            preparedStatement.close();
        }
    }

    private Properties getDBProperties() {
        return dbProperties;
    }
}

----

package com.github.tm_425006.webproject.model;

import com.github.tm_425006.webproject.exception.CVGeneratorException;
import com.github.tm_425006.webproject.bean.Language;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Properties;

public class LanguageDAO implements DAO<Language> {
    private final Properties dbProperties;

    public LanguageDAO(Properties dbProperties) {
        this.dbProperties = dbProperties;
    }

    public Language get(int id) throws SQLException, ClassNotFoundException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement userQuery = connection.prepareStatement(
                    "select * from language where id = ( ? )"
            );
            userQuery.setInt(1, id);
            ResultSet resultSet = userQuery.executeQuery();
            if (resultSet.next()) {
                return new Language(id, resultSet.getInt("cv_id"),
                        resultSet.getString("name"));
            }
            return null;
        }
    }

    public ArrayList<Language> getAll(int cvId) throws SQLException, ClassNotFoundException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement userQuery = connection.prepareStatement(
                    "select * from language where cv_id = ( ? )"
            );
            userQuery.setInt(1, cvId);
            ResultSet resultSet = userQuery.executeQuery();
            ArrayList<Language> list = new ArrayList<>();
            while (resultSet.next()) {
                list.add(new Language(resultSet.getInt("id"), cvId,
                        resultSet.getString("name")));
            }
            return list;
        }
    }

    public Integer insert(Language language) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "insert into language (cv_id, name) " +
                            "values (?, ?)"
            );
            preparedStatement.setInt(1, language.getCvId());
            preparedStatement.setString(2, language.getName());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not insert Language: " + language);
            preparedStatement.close();
            ResultSet resultSet = connection.createStatement().executeQuery("select last_insert_id()");
            resultSet.next();
            return resultSet.getInt(1);
        }
    }

    public void update(Language language) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "update language set " +
                            "name = ( ? ) " +
                            "where id = ( ? )"
            );
            preparedStatement.setString(1, language.getName());
            preparedStatement.setInt(2, language.getId());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not update Language: " + language);
            preparedStatement.close();
        }
    }

    public void delete(Language language) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "delete from language where id = ( ? )"
            );
            preparedStatement.setInt(1, language.getId());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not delete Language: " + language);
            preparedStatement.close();
        }
    }

    private Properties getDBProperties() {
        return dbProperties;
    }
}

----

package com.github.tm_425006.webproject.model;

import com.github.tm_425006.webproject.exception.CVGeneratorException;
import com.github.tm_425006.webproject.bean.Project;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Properties;

public class ProjectDAO implements DAO<Project> {
    private final Properties dbProperties;

    public ProjectDAO(Properties dbProperties) {
        this.dbProperties = dbProperties;
    }

    public Project get(int id) throws SQLException, ClassNotFoundException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement userQuery = connection.prepareStatement(
                    "select * from project where id = ( ? )"
            );
            userQuery.setInt(1, id);
            ResultSet resultSet = userQuery.executeQuery();
            if (resultSet.next()) {
                return new Project(id, resultSet.getInt("cv_id"),
                        resultSet.getString("name"), resultSet.getString("details"));
            }
            return null;
        }
    }

    public ArrayList<Project> getAll(int cvId) throws SQLException, ClassNotFoundException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement userQuery = connection.prepareStatement(
                    "select * from project where cv_id = ( ? )"
            );
            userQuery.setInt(1, cvId);
            ResultSet resultSet = userQuery.executeQuery();
            ArrayList<Project> list = new ArrayList<>();
            while (resultSet.next()) {
                list.add(new Project(resultSet.getInt("id"), cvId,
                        resultSet.getString("name"), resultSet.getString("details")));
            }
            return list;
        }
    }

    public Integer insert(Project project) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "insert into project (cv_id, name, details) " +
                            "values (?, ?, ?)"
            );
            preparedStatement.setInt(1, project.getCvId());
            preparedStatement.setString(2, project.getName());
            preparedStatement.setString(3, project.getDetails());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not insert Project: " + project);
            preparedStatement.close();
            ResultSet resultSet = connection.createStatement().executeQuery("select last_insert_id()");
            resultSet.next();
            return resultSet.getInt(1);
        }
    }

    public void update(Project project) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "update project set " +
                            "name = ( ? ), " +
                            "details = ( ? ) " +
                            "where id = ( ? )"
            );
            preparedStatement.setString(1, project.getName());
            preparedStatement.setString(2, project.getDetails());
            preparedStatement.setInt(3, project.getId());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not update Project: " + project);
            preparedStatement.close();
        }
    }

    public void delete(Project project) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "delete from project where id = ( ? )"
            );
            preparedStatement.setInt(1, project.getId());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not delete Project: " + project);
            preparedStatement.close();
        }
    }

    private Properties getDBProperties() {
        return dbProperties;
    }
}

----

package com.github.tm_425006.webproject.model;

import com.github.tm_425006.webproject.exception.CVGeneratorException;
import com.github.tm_425006.webproject.bean.Skill;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Properties;

public class SkillDAO implements DAO<Skill> {
    private final Properties dbProperties;

    public SkillDAO(Properties dbProperties) {
        this.dbProperties = dbProperties;
    }

    public Skill get(int id) throws SQLException, ClassNotFoundException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement userQuery = connection.prepareStatement(
                    "select * from skill where id = ( ? )"
            );
            userQuery.setInt(1, id);
            ResultSet resultSet = userQuery.executeQuery();
            if (resultSet.next()) {
                return new Skill(id, resultSet.getInt("cv_id"),
                        resultSet.getString("name"));
            }
            return null;
        }
    }

    public ArrayList<Skill> getAll(int cvId) throws SQLException, ClassNotFoundException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement userQuery = connection.prepareStatement(
                    "select * from skill where cv_id = ( ? )"
            );
            userQuery.setInt(1, cvId);
            ResultSet resultSet = userQuery.executeQuery();
            ArrayList<Skill> list = new ArrayList<>();
            while (resultSet.next()) {
                list.add(new Skill(resultSet.getInt("id"), cvId,
                        resultSet.getString("name")));
            }
            return list;
        }
    }

    public Integer insert(Skill skill) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "insert into skill (cv_id, name) " +
                            "values (?, ?)"
            );
            preparedStatement.setInt(1, skill.getCvId());
            preparedStatement.setString(2, skill.getName());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not insert Skill: " + skill);
            preparedStatement.close();
            ResultSet resultSet = connection.createStatement().executeQuery("select last_insert_id()");
            resultSet.next();
            return resultSet.getInt(1);
        }
    }

    public void update(Skill skill) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "update skill set " +
                            "name = ( ? ) " +
                            "where id = ( ? )"
            );
            preparedStatement.setString(1, skill.getName());
            preparedStatement.setInt(2, skill.getId());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not update Skill: " + skill);
            preparedStatement.close();
        }
    }

    public void delete(Skill skill) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "delete from skill where id = ( ? )"
            );
            preparedStatement.setInt(1, skill.getId());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not delete Skill: " + skill);
            preparedStatement.close();
        }
    }

    private Properties getDBProperties() {
        return dbProperties;
    }
}

----

package com.github.tm_425006.webproject.model;

import com.github.tm_425006.webproject.exception.CVGeneratorException;
import com.github.tm_425006.webproject.bean.User;

import java.sql.*;
import java.util.ArrayList;
import java.util.Locale;
import java.util.Properties;

public class UserDAO implements DAO<User> {
    private final Properties dbProperties;

    public UserDAO(Properties dbProperties) {
        this.dbProperties = dbProperties;
    }

    public User get(String email) throws SQLException, ClassNotFoundException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement userQuery = connection.prepareStatement(
                    "select * from user where lower(email) = ( ? )"
            );
            userQuery.setString(1, email.toLowerCase(Locale.ROOT));
            ResultSet resultSet = userQuery.executeQuery();
            if (resultSet.next()) {
                return new User(resultSet.getInt("id"), resultSet.getString("first_name"),
                        resultSet.getString("last_name"), resultSet.getDate("birth_date"),
                        resultSet.getString("email"), resultSet.getString("password"),
                        resultSet.getString("address"));
            }

            return null;
        }
    }

    public ArrayList<User> getAll() throws SQLException, ClassNotFoundException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("select * from user");
            ArrayList<User> list = new ArrayList<>();
            while (resultSet.next()) {
                list.add(new User(resultSet.getInt("id"), resultSet.getString("first_name"),
                        resultSet.getString("last_name"), resultSet.getDate("birth_date"),
                        resultSet.getString("email"), resultSet.getString("password"),
                        resultSet.getString("address")));
            }
            return list;
        }
    }

    public Integer insert(User user) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "insert into user (first_name, last_name, birth_date, email, password, address) " +
                            "values (?, ?, ?, ?, ?, ?)"
            );
            preparedStatement.setString(1, user.getFirstName());
            preparedStatement.setString(2, user.getLastName());
            preparedStatement.setDate(3, user.getBirthDate());
            preparedStatement.setString(4, user.getEmail());
            preparedStatement.setString(5, user.getPassword());
            preparedStatement.setString(6, user.getAddress());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not insert User");
            preparedStatement.close();
            ResultSet resultSet = connection.createStatement().executeQuery("select last_insert_id()");
            resultSet.next();
            return resultSet.getInt(1);
        }
    }

    public void update(User user) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "update user set " +
                            "first_name = ( ? ), " +
                            "last_name = ( ? ), " +
                            "email = ( ? ), " +
                            "birth_date = ( ? ), " +
                            "password = ( ? ), " +
                            "address = ( ? ) " +
                            "where id = ( ? )"
            );
            preparedStatement.setString(1, user.getFirstName());
            preparedStatement.setString(2, user.getLastName());
            preparedStatement.setString(3, user.getEmail());
            preparedStatement.setDate(4, user.getBirthDate());
            preparedStatement.setString(5, user.getPassword());
            preparedStatement.setString(6, user.getAddress());
            preparedStatement.setInt(7, user.getId());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not update User");
            preparedStatement.close();
        }
    }

    public void delete(User user) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "delete from user where id = ( ? )"
            );
            preparedStatement.setInt(1, user.getId());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not delete User");
            preparedStatement.close();
        }
    }

    private Properties getDBProperties() {
        return dbProperties;
    }
}

----

package com.github.tm_425006.webproject.model;

import com.github.tm_425006.webproject.exception.CVGeneratorException;
import com.github.tm_425006.webproject.bean.WorkExperience;

import java.sql.*;
import java.util.ArrayList;
import java.util.Properties;

public class WorkExperienceDAO implements DAO<WorkExperience> {
    private final Properties dbProperties;

    public WorkExperienceDAO(Properties dbProperties) {
        this.dbProperties = dbProperties;
    }

    public WorkExperience get(int id) throws SQLException, ClassNotFoundException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement userQuery = connection.prepareStatement(
                    "select * from work_experience where id = ( ? )"
            );
            userQuery.setInt(1, id);
            ResultSet resultSet = userQuery.executeQuery();
            if (resultSet.next()) {
                return new WorkExperience(id, resultSet.getInt("cv_id"),
                        resultSet.getString("role"), resultSet.getString("institute"),
                        resultSet.getDate("start_date"), resultSet.getDate("end_date"),
                        resultSet.getString("details"));
            }
            return null;
        }
    }

    public ArrayList<WorkExperience> getAll(int cvId) throws SQLException, ClassNotFoundException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement userQuery = connection.prepareStatement(
                    "select * from work_experience where cv_id = ( ? )"
            );
            userQuery.setInt(1, cvId);
            ResultSet resultSet = userQuery.executeQuery();
            ArrayList<WorkExperience> list = new ArrayList<>();
            while (resultSet.next()) {
                list.add(new WorkExperience(resultSet.getInt("id"), cvId,
                        resultSet.getString("role"), resultSet.getString("institute"),
                        resultSet.getDate("start_date"), resultSet.getDate("end_date"),
                        resultSet.getString("details")));
            }
            return list;
        }
    }

    public Integer insert(WorkExperience workExperience) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "insert into work_experience (cv_id, role, institute, start_date, end_date, details) " +
                            "values (?, ?, ?, ?, ?, ?)"
            );
            preparedStatement.setInt(1, workExperience.getCvId());
            preparedStatement.setString(2, workExperience.getRole());
            preparedStatement.setString(3, workExperience.getInstitute());
            preparedStatement.setDate(4, workExperience.getStartDate());
            if (workExperience.getEndDate() != null)
                preparedStatement.setDate(5, workExperience.getEndDate());
            else
                preparedStatement.setNull(5, Types.DATE);
            preparedStatement.setString(6, workExperience.getDetails());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not insert WorkExperience: " + workExperience);
            ResultSet resultSet = connection.createStatement().executeQuery("select last_insert_id()");
            resultSet.next();
            return resultSet.getInt(1);
        }
    }

    public void update(WorkExperience workExperience) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "update work_experience set " +
                            "role = ( ? ), " +
                            "institute = ( ? ), " +
                            "start_date = ( ? ), " +
                            "end_date = ( ? ), " +
                            "details = ( ? ) " +
                            "where id = ( ? )"
            );
            preparedStatement.setString(1, workExperience.getRole());
            preparedStatement.setString(2, workExperience.getInstitute());
            preparedStatement.setDate(3, workExperience.getStartDate());
            if (workExperience.getEndDate() != null)
                preparedStatement.setDate(4, workExperience.getEndDate());
            else
                preparedStatement.setNull(4, Types.DATE);
            preparedStatement.setString(5, workExperience.getDetails());
            preparedStatement.setInt(6, workExperience.getId());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not update WorkExperience: " + workExperience);
            preparedStatement.close();
        }
    }

    public void delete(WorkExperience workExperience) throws SQLException, ClassNotFoundException, CVGeneratorException {
        try (Connection connection = ConnectionUtils.getConnection(this.getDBProperties())) {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "delete from work_experience where id = ( ? )"
            );
            preparedStatement.setInt(1, workExperience.getId());
            if (preparedStatement.executeUpdate() != 1)
                throw new CVGeneratorException("Could not delete WorkExperience: " + workExperience);
            preparedStatement.close();
        }
    }

    private Properties getDBProperties() {
        return dbProperties;
    }
}

----

package com.github.tm_425006.webproject.service;

import com.github.tm_425006.webproject.exception.CVGeneratorException;
import com.github.tm_425006.webproject.model.*;
import com.github.tm_425006.webproject.bean.*;

import java.sql.SQLException;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.Properties;

public class CVService {
    private final DAO<CV> cvDAO;
    private final DAO<BasicInformation> basicInformationDAO;
    private final DAO<Language> languageDAO;
    private final DAO<Certificate> certificateDAO;
    private final DAO<ContactInformation> contactInformationDAO;
    private final DAO<Education> educationDAO;
    private final DAO<Interest> interestDAO;
    private final DAO<Project> projectDAO;
    private final DAO<WorkExperience> workExperienceDAO;
    private final DAO<Skill> skillDAO;

    public CVService(Properties dbProperties) {
        this.cvDAO = new CVDAO(dbProperties);
        this.basicInformationDAO = new BasicInformationDAO(dbProperties);
        this.languageDAO = new LanguageDAO(dbProperties);
        this.certificateDAO = new CertificateDAO(dbProperties);
        this.contactInformationDAO = new ContactInformationDAO(dbProperties);
        this.educationDAO = new EducationDAO(dbProperties);
        this.interestDAO = new InterestDAO(dbProperties);
        this.projectDAO = new ProjectDAO(dbProperties);
        this.workExperienceDAO = new WorkExperienceDAO(dbProperties);
        this.skillDAO = new SkillDAO(dbProperties);
    }

    public CV get(int id) throws SQLException, CVGeneratorException, ClassNotFoundException {
        CV cv = this.getCvDAO().get(id);
        cv.setBasicInformation(this.getBasicInformationDAO().get(id));
        cv.setLanguages(this.getLanguageDAO().getAll(id));
        cv.setCertificates(this.getCertificateDAO().getAll(id));
        cv.setContactInformationList(this.getContactInformationDAO().getAll(id));
        cv.setEducations(this.getEducationDAO().getAll(id));
        cv.setInterests(this.getInterestDAO().getAll(id));
        cv.setProjects(this.getProjectDAO().getAll(id));
        cv.setWorkExperiences(this.getWorkExperienceDAO().getAll(id));
        cv.setSkills(this.getSkillDAO().getAll(id));

        return cv;
    }

    public ArrayList<CV> getAll(int userId) throws SQLException, CVGeneratorException, ClassNotFoundException {
        ArrayList<CV> list = this.getCvDAO().getAll(userId);

        if (list == null || list.size() == 0)
            return null;

        for (CV cv : list) {
            cv.setBasicInformation(this.getBasicInformationDAO().get(cv.getId()));
            cv.setLanguages(this.getLanguageDAO().getAll(cv.getId()));
            cv.setCertificates(this.getCertificateDAO().getAll(cv.getId()));
            cv.setContactInformationList(this.getContactInformationDAO().getAll(cv.getId()));
            cv.setEducations(this.getEducationDAO().getAll(cv.getId()));
            cv.setInterests(this.getInterestDAO().getAll(cv.getId()));
            cv.setProjects(this.getProjectDAO().getAll(cv.getId()));
            cv.setWorkExperiences(this.getWorkExperienceDAO().getAll(cv.getId()));
            cv.setSkills(this.getSkillDAO().getAll(cv.getId()));
        }
        return list;
    }

    public Integer insert(CV cv) throws SQLException, CVGeneratorException, ClassNotFoundException {
        Integer cvId = this.getCvDAO().insert(cv);

        cv.getBasicInformation().setCvId(cvId);
        this.getBasicInformationDAO().insert(cv.getBasicInformation());

        for (Language language : cv.getLanguages()) {
            language.setCvId(cvId);
            this.getLanguageDAO().insert(language);
        }
        for (Certificate certificate : cv.getCertificates()) {
            certificate.setCvId(cvId);
            this.getCertificateDAO().insert(certificate);
        }
        for (ContactInformation contactInformation : cv.getContactInformationList()) {
            contactInformation.setCvId(cvId);
            this.getContactInformationDAO().insert(contactInformation);
        }
        for (Education education : cv.getEducations()) {
            education.setCvId(cvId);
            this.getEducationDAO().insert(education);
        }
        for (Interest interest : cv.getInterests()) {
            interest.setCvId(cvId);
            this.getInterestDAO().insert(interest);
        }
        for (Project project : cv.getProjects()) {
            project.setCvId(cvId);
            this.getProjectDAO().insert(project);
        }
        for (WorkExperience workExperience : cv.getWorkExperiences()) {
            workExperience.setCvId(cvId);
            this.getWorkExperienceDAO().insert(workExperience);
        }
        for (Skill skill : cv.getSkills()) {
            skill.setCvId(cvId);
            this.getSkillDAO().insert(skill);
        }
        return cvId;
    }

    public void update(CV modifiedCV) throws SQLException, CVGeneratorException, ClassNotFoundException {
        CV originalCV = this.get(modifiedCV.getId());
        this.getCvDAO().update(modifiedCV);
        this.deleteRemovedEntries(modifiedCV, originalCV);
        this.insertOrUpdateEntries(modifiedCV);
    }

    private void insertOrUpdateEntries(CV cv) throws SQLException, CVGeneratorException, ClassNotFoundException {
        if (cv.getBasicInformation().getId() == null || cv.getBasicInformation().getId() == -1) {
            this.getBasicInformationDAO().insert(cv.getBasicInformation());
        } else {
            this.getBasicInformationDAO().update(cv.getBasicInformation());
        }

        for (Language language : cv.getLanguages()) {
            if (language.getId() == null || language.getId() == -1) {
                this.getLanguageDAO().insert(language);
            } else {
                this.getLanguageDAO().update(language);
            }
        }
        for (Certificate certificate : cv.getCertificates()) {
            if (certificate.getId() == null || certificate.getId() == -1) {
                this.getCertificateDAO().insert(certificate);
            } else {
                this.getCertificateDAO().update(certificate);
            }
        }
        for (ContactInformation contactInformation : cv.getContactInformationList()) {
            if (contactInformation.getId() == null || contactInformation.getId() == -1) {
                this.getContactInformationDAO().insert(contactInformation);
            } else {
                this.getContactInformationDAO().update(contactInformation);
            }
        }
        for (Education education : cv.getEducations()) {
            if (education.getId() == null || education.getId() == -1) {
                this.getEducationDAO().insert(education);
            } else {
                this.getEducationDAO().update(education);
            }
        }
        for (Interest interest : cv.getInterests()) {
            if (interest.getId() == null || interest.getId() == -1) {
                this.getInterestDAO().insert(interest);
            } else {
                this.getInterestDAO().update(interest);
            }
        }
        for (Project project : cv.getProjects()) {
            if (project.getId() == null || project.getId() == -1) {
                this.getProjectDAO().insert(project);
            } else {
                this.getProjectDAO().update(project);
            }
        }
        for (WorkExperience workExperience : cv.getWorkExperiences()) {
            if (workExperience.getId() == null || workExperience.getId() == -1) {
                this.getWorkExperienceDAO().insert(workExperience);
            } else {
                this.getWorkExperienceDAO().update(workExperience);
            }
        }
        for (Skill skill : cv.getSkills()) {
            if (skill.getId() == null || skill.getId() == -1) {
                this.getSkillDAO().insert(skill);
            } else {
                this.getSkillDAO().update(skill);
            }
        }
    }

    private void deleteRemovedEntries(CV modifiedCV, CV originalCV) throws SQLException, CVGeneratorException, ClassNotFoundException {
        HashSet<Language> removedLanguages = new HashSet<>(originalCV.getLanguages());
        removedLanguages.removeAll(new HashSet<>(modifiedCV.getLanguages()));

        for (Language language : removedLanguages)
            this.getLanguageDAO().delete(language);

        HashSet<Certificate> removedCertificates = new HashSet<>(originalCV.getCertificates());
        removedCertificates.removeAll(new HashSet<>(modifiedCV.getCertificates()));

        for (Certificate certificate : removedCertificates)
            this.getCertificateDAO().delete(certificate);

        HashSet<ContactInformation> removedContactInformationSet = new HashSet<>(originalCV.getContactInformationList());
        removedContactInformationSet.removeAll(new HashSet<>(modifiedCV.getContactInformationList()));

        for (ContactInformation contactInformation : removedContactInformationSet)
            this.getContactInformationDAO().delete(contactInformation);

        HashSet<Education> removedEducations = new HashSet<>(originalCV.getEducations());
        removedEducations.removeAll(new HashSet<>(modifiedCV.getEducations()));

        for (Education education : removedEducations)
            this.getEducationDAO().delete(education);

        HashSet<Interest> removedInterests = new HashSet<>(originalCV.getInterests());
        removedInterests.removeAll(new HashSet<>(modifiedCV.getInterests()));

        for (Interest interest : removedInterests)
            this.getInterestDAO().delete(interest);

        HashSet<Project> removedProjects = new HashSet<>(originalCV.getProjects());
        removedProjects.removeAll(new HashSet<>(modifiedCV.getProjects()));

        for (Project project : removedProjects)
            this.getProjectDAO().delete(project);

        HashSet<WorkExperience> removedWorkExperiences = new HashSet<>(originalCV.getWorkExperiences());
        removedWorkExperiences.removeAll(new HashSet<>(modifiedCV.getWorkExperiences()));

        for (WorkExperience workExperience : removedWorkExperiences)
            this.getWorkExperienceDAO().delete(workExperience);

        HashSet<Skill> removedSkills = new HashSet<>(originalCV.getSkills());
        removedSkills.removeAll(new HashSet<>(modifiedCV.getSkills()));

        for (Skill skill : removedSkills)
            this.getSkillDAO().delete(skill);
    }

    public void delete(CV cv) throws SQLException, CVGeneratorException, ClassNotFoundException {
        this.getCvDAO().delete(cv);
    }

    private DAO<CV> getCvDAO() {
        return cvDAO;
    }

    private DAO<BasicInformation> getBasicInformationDAO() {
        return basicInformationDAO;
    }

    private DAO<Language> getLanguageDAO() {
        return languageDAO;
    }

    private DAO<Certificate> getCertificateDAO() {
        return certificateDAO;
    }

    private DAO<ContactInformation> getContactInformationDAO() {
        return contactInformationDAO;
    }

    private DAO<Education> getEducationDAO() {
        return educationDAO;
    }

    private DAO<Interest> getInterestDAO() {
        return interestDAO;
    }

    private DAO<Project> getProjectDAO() {
        return projectDAO;
    }

    private DAO<WorkExperience> getWorkExperienceDAO() {
        return workExperienceDAO;
    }

    private DAO<Skill> getSkillDAO() {
        return skillDAO;
    }
}

----

<%@ page import="com.github.tm_425006.webproject.bean.CV"%>
<%@ page import="com.github.tm_425006.webproject.bean.BasicInformation"%>
<%@ page errorPage="error.jsp"%>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="css/bootstrap.css" />
  <link rel="stylesheet" href="css/global.css" />
  <script src="js/popper.js" />
  </script>
  <script src="js/bootstrap.js"></script>
</head>

<body>

 <jsp:useBean id="user" scope="session" class="com.github.tm_425006.webproject.bean.User" />

<%
    if (user == null || user.getId() == null)  {
      response.sendRedirect("login.jsp?error=Not logged in");
      return;
      } 
  %>


      <div class="card mb-3">
        <div class="card-body">
          <div class="container">
            <h5 class="card-title mb-3">Basic Information</h5>
            <div class="row">
              <div class="col-md-6 mb-3">
              <%
                CV cv = (CV)request.getAttribute("cv");
                if (cv != null && cv.getBasicInformation() != null) {
                  BasicInformation basicinformation = cv.getBasicInformation();
              %>
                <input type="hidden" name="basicInformationId" value='<%=basicinformation.getId()%>' />
                <input type="hidden" name="basicInformationCvId" value='<%=basicinformation.getCvId()%>' />
                <div class="form-floating">
                  <input type="text" class="form-control" name="basicInformationName" required
                  value='<%=basicinformation.getName()%>'/>
                  <label for="basicInformationName">Name</label>
                </div>
              </div>
              <div class="col-md-6 mb-3">
                <div class="form-floating">
                  <input type="date" class="form-control" name="basicInformationBirthDate" required/
                  value='<%=basicinformation.getBirthDate()%>'>
                  <label for="basicInformationBirthDate">Date of Birth</label>
                </div>
              </div>
            </div>
            <div class="row">
              <div class="col-12">
                <div class="form-floating">
                  <textarea class="form-control" name="basicInformationAddress" required
                  ><%=basicinformation.getAddress()%></textarea>
                  <label for="basicInformationAddress">Address</label>
                </div>
              </div>
            </div>
                <% } else { %>
                <input type="hidden" name="basicInformationId" value="-1" />
                <input type="hidden" name="basicInformationCvId" value="-1" />
                <div class="form-floating">
                  <input type="text" class="form-control" name="basicInformationName" required
                  value='<%=user.getFirstName() + " " + user.getLastName()%>'/>
                  <label for="basicInformationName">Name</label>
                </div>
              </div>
              <div class="col-md-6 mb-3">
                <div class="form-floating">
                  <input type="date" class="form-control" name="basicInformationBirthDate" required/
                  value='<%=user.getBirthDate()%>'>
                  <label for="basicInformationBirthDate">Date of Birth</label>
                </div>
              </div>
            </div>
            <div class="row">
              <div class="col-12">
                <div class="form-floating">
                  <textarea class="form-control" name="basicInformationAddress" required
                  ><%=user.getAddress()%></textarea>
                  <label for="basicInformationAddress">Address</label>
                </div>
              </div>
            </div>
                <% } %>
          </div>
        </div>
      </div>
</body>

</html>
----

<%@ page errorPage="error.jsp"%>
<%@ page import="com.github.tm_425006.webproject.bean.CV"%>
<%@ page import="com.github.tm_425006.webproject.bean.Certificate"%>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="css/bootstrap.css" />
  <link rel="stylesheet" href="css/global.css" />
  <script src="js/popper.js" />
  </script>
  <script src="js/bootstrap.js"></script>
  <script src="js/certificate.js"></script>
</head>

<body>

 <jsp:useBean id="user" scope="session" class="com.github.tm_425006.webproject.bean.User" />

<%
    if (user == null || user.getId() == null)  {
      response.sendRedirect("login.jsp?error=Not logged in");
      return;
      } 
  %>

  
      <div class="card mb-3">
        <div class="card-body">
          <div class="container">
            <h5 class="card-title mb-3">Certificates</h5>
            <div class="h-100 w-100" id="certificates">
              <!-- Certificates will be inserted here -->
              <%
                CV cv = (CV)request.getAttribute("cv");
                if (cv != null && cv.getCertificates() != null && cv.getCertificates().size() != 0) {
                  for (Certificate certificate : cv.getCertificates()) {
              %>
                <div class="card mb-3" id='<%="certificateComponentId" + certificate.getId()%>'>
                  <div class="card-body">
                    <div class="container">
                      <div class="row">
                        <input type="hidden" name="certificateId" value='<%=certificate.getId()%>' />
                        <input type="hidden" name="certificateCvId" value='<%=certificate.getCvId()%>' />
                        <div class="col-md-6 mb-3">
                          <div class="form-floating">
                            <input type="text" class="form-control" name="certificateName" required
                            value='<%=certificate.getName()%>'
                            />
                            <label for="certificateName">Certificate Name</label>
                          </div>
                        </div>
                        <div class="col-md-6 mb-3">
                          <div class="form-floating">
                            <input type="text" class="form-control" name="certificateInstitute" required
                            value='<%=certificate.getInstitute()%>'
                            />
                            <label for="certificateInstitute">Institute Name</label>
                          </div>
                        </div>
                      </div>
                      <div class="row">
                        <div class="col-md-6">
                          <div class="form-floating">
                            <input type="date" class="form-control" name="certificateCompletionDate" required
                            value='<%=certificate.getCompletionDate()%>'
                            />
                            <label for="certificateCompletionDate">Completion Date</label>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <button type="button"
                    class="opacity-0 hover-opacity-1 position-absolute top-0 start-100 translate-middle badge rounded-pill btn btn-danger"
                    onclick=<%out.print(String.format("removeElement('certificateComponentId%s')", certificate.getId()));%>
                    >
                    x
                  </button>
                </div>
              <% }} %>
            </div>
          </div>
          <div class="mb-3">
            <div class="d-flex justify-content-end">
              <button type="button" class="btn btn-primary" 
              onclick=<%
              if (cv == null) {
                        out.print("addCertificate()");
              } else {
                        out.print(String.format("addCertificate(%s)", cv.getId()));
              }
              %>
            >Add</button>
            </div>
          </div>
        </div>
      </div>
</body>

</html>
----

<%@ page import="com.github.tm_425006.webproject.bean.User"%>
<%@ page errorPage="error.jsp"%>

<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="css/bootstrap.css" />
  <link rel="stylesheet" href="css/global.css" />

  <script src="js/popper.js" />
  </script>
  <script src="js/bootstrap.js"></script>
  <script src="js/changepassword.js"></script>
  <title>CV Generator - Change Password</title>
</head>

<body>

  <jsp:useBean id="user" scope="session" class="com.github.tm_425006.webproject.bean.User" />

    <%
      if (user == null || user.getId() == null) {
      response.sendRedirect("login.jsp?error=Not logged in");
      return;
      }
    %>


 <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
    <div class="container-md">
      <div class="navbar-brand">
        CV Generator
      </div>
      
      <div class="d-flex">
        <ul class="navbar-nav">
          <li class="nav-item">
          <form class="mb-0 d-inline" method="POST" action="cvcontroller?action=getAll" >
            <button type="submit" class="btn btn-primary">Home</button>
          </form>
          </li>
        </ul>
        <ul class="navbar-nav">
          <li class="nav-item">
            <div class="dropdown">
              <a class="btn btn-primary dropdown-toggle" role="button" id="dropdownMenuButton"
                data-bs-toggle="dropdown">
                <jsp:getProperty name="user" property="firstName" />   
              </a>
              <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                 <li><a class="dropdown-item" href="updateaccount.jsp">Update Account</a></li>
                <li><a class="dropdown-item" href="changepassword.jsp">Change Password</a></li>
                <li>
                  <hr class="dropdown-divider">
                </li>
                
                <li><form method="POST" action="usercontroller?action=logout">
                <button type="submit" class="dropdown-item" >Logout</button></form></li>
              </ul>
            </div>
          </li>
        </ul>
      </div>
    </div>
  </nav>


  <div class="container-md">
      <div class="mb-3 mt-3">
        <div class="row">
          <center>
            <div class="col-md-4">
              <h2>Change Password</h2>
            </div>
          </center>
        </div>
      </div>

      <% if(request.getParameterMap().containsKey("error")) { %>
      <jsp:include page="message.jsp">
        <jsp:param name="error" value='<%=request.getParameter("error")%>' />
      </jsp:include>
      <% } else if(request.getParameterMap().containsKey("success")) { %>
      <jsp:include page="message.jsp">
        <jsp:param name="success" value='<%=request.getParameter("success")%>' />
      </jsp:include>
      <% } %>

    <form method="POST" action="usercontroller?action=changePassword" 
          onsubmit="return handleChangePassword()">
      <div class="mb-3">
        <div class="row">
          <center>
            <div class="col-md-4">
              <div class="form-floating">
                <input type="password" class="form-control" name="currentPassword" required/>
                <label for="currentPassword">Current Password</label>
              </div>
            </div>
          </center>
        </div>
      </div>

      <div class="mb-3">
        <div class="row">
          <center>
            <div class="col-md-4">
              <div class="form-floating">
                <input type="password" class="form-control" name="newPassword" required/>
                <label for="newPassword">New Password</label>
              </div>
            </div>
          </center>
        </div>
      </div>

      <div class="mb-3">
        <div class="row">
          <center>
            <div class="col-md-4">
              <div class="form-floating">
                <input type="password" class="form-control" name="confirmPassword" required/>
                <label for="confirmPassword">Confirm Password</label>
              </div>
            </div>
          </center>
        </div>
      </div>

      <div class="mb-3">
        <div class="row">
          <center>
            <div class="col-md-4">
              <button type="submit" class="btn btn-primary">Save</button>
            </div>
          </center>
        </div>
      </div>

    </form>
  </div>
</body>

</html>
----

<%@ page import="com.github.tm_425006.webproject.bean.CV"%>
<%@ page import="com.github.tm_425006.webproject.bean.ContactInformation"%>
<%@ page errorPage="error.jsp"%>

<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="css/bootstrap.css" />
  <link rel="stylesheet" href="css/global.css" />
  <script src="js/popper.js" />
  </script>
  <script src="js/bootstrap.js"></script>
  <script src="js/contactinformation.js"></script>
</head>

<body>
 <jsp:useBean id="user" scope="session" class="com.github.tm_425006.webproject.bean.User" />

<%
    if (user == null || user.getId() == null)  {
      response.sendRedirect("login.jsp?error=Not logged in");
      return;
      } 
  %>

      <div class="card mb-3">
        <div class="card-body">
          <div class="container">
            <h5 class="card-title mb-3">Contact Information</h5>
            <div class="h-100 w-100" id="contactInformations">
              <!-- Contact Information will be inserted here -->
               <%
                CV cv = (CV)request.getAttribute("cv");
                if (cv != null && cv.getContactInformationList() != null && cv.getContactInformationList().size() != 0) {
                  for (ContactInformation contactInformation : cv.getContactInformationList()) {
              %>
              <div class="card mb-3" id='<%="contactInformationComponentId" + contactInformation.getId()%>'>
              <div class="card-body">
                <div class="container">
                  <div class="row">
                  <input type="hidden" name="contactInformationId" value='<%=contactInformation.getId()%>'>
                  <input type="hidden" name="contactInformationCvId" value='<%=contactInformation.getCvId()%>'>
                    <div class="col-6">
                      <div class="form-floating">
                        <input type="text" class="form-control" name="contactInformationName" required
                        value='<%=contactInformation.getName()%>'
                        />
                        <label for="contactInformationName">Name</label>
                      </div>
                    </div>
                    <div class="col-6">
                      <div class="form-floating">
                        <input type="text" class="form-control" name="contactInformationUrl" required
                        value='<%=contactInformation.getUrl()%>'
                        />
                        <label for="contactInformationUrl">URL</label>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <button type="button"
                class="opacity-0 hover-opacity-1 position-absolute top-0 start-100 translate-middle badge rounded-pill btn btn-danger"
                onclick=<%out.print(String.format("removeElement('contactInformationComponentId%s')", contactInformation.getId()));%>
                >
                x
              </button>
            </div>
            <% }} %>
            </div>
          </div>
          <div class="mb-3">
            <div class="d-flex justify-content-end">
              <button type="button" class="btn btn-primary" 
              onclick=<%
              if (cv == null) {
                        out.print("addContactInformation()");
              } else {
                        out.print(String.format("addContactInformation(%s)", cv.getId()));
              }
              %>
              >Add</button>
            </div>
          </div>
        </div>
      </div>
</body>

</html>
----

<%@ page import="com.github.tm_425006.webproject.bean.CV"%>
<%@ page import="com.github.tm_425006.webproject.bean.User"%>
<%@ page errorPage="error.jsp"%>

<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="css/bootstrap.css" />
  <link rel="stylesheet" href="css/global.css" />
  <script src="js/popper.js" />
  </script>
  <script src="js/bootstrap.js"></script>
  <script src="js/cv.js"></script>
  <script src="js/global.js"></script>
  <title>CV Generator</title>
</head>

<body>

  <jsp:useBean id="user" scope="session" class="com.github.tm_425006.webproject.bean.User" />

<%
    if (user == null || user.getId() == null)  {
      response.sendRedirect("login.jsp?error=Not logged in");
      return;
      } 
  %>

  <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
    <div class="container-md">
      <div class="navbar-brand">
        CV Generator
      </div>
      
      <div class="d-flex">
        <ul class="navbar-nav">
          <li class="nav-item">
          <form class="mb-0 d-inline" method="POST" action="cvcontroller?action=getAll">
            <button type="submit" class="btn btn-primary">Home</button>
          </form>
          </li>
        </ul>
        <ul class="navbar-nav">
          <li class="nav-item">
            <div class="dropdown">
              <a class="btn btn-primary dropdown-toggle" role="button" id="dropdownMenuButton"
                data-bs-toggle="dropdown">
                <jsp:getProperty name="user" property="firstName" />   
              </a>
              <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                 <li><a class="dropdown-item" href="updateaccount.jsp">Update Account</a></li>
                <li><a class="dropdown-item" href="changepassword.jsp">Change Password</a></li>
                <li>
                  <hr class="dropdown-divider">
                </li>
                
                <li><form method="POST" action="usercontroller?action=logout">
                <button type="submit" class="dropdown-item" >Logout</button></form></li>
              </ul>
            </div>
          </li>
        </ul>
      </div>
    </div>
  </nav>


  <div class="container-md mt-3">

    <% if(request.getParameterMap().containsKey("error")) { %>
      <jsp:include page="message.jsp">
        <jsp:param name="error" value='<%=request.getParameter("error")%>' />
      </jsp:include>
      <% } else if(request.getParameterMap().containsKey("success")) { %>
      <jsp:include page="message.jsp">
        <jsp:param name="success" value='<%=request.getParameter("success")%>' />
      </jsp:include>
      <% } %>

      <% CV cv = (CV)request.getAttribute("cv"); %>

      <div class="d-flex justify-content-between mb-3">
      <form class="mb-0 d-inline" name="getAllForm" method="POST" action="cvcontroller?action=getAll">
        <button type="submit" id="backButton" class="btn btn-secondary">Back</button>
    </form>
        <div>
          <form class="mb-0 d-inline me-3" method="POST" action="cvcontroller?action=delete">
            <input type="hidden" name="id" value=<% if (cv != null && cv.getId() != null) {
                                                      out.println(cv.getId());
                                                    } else {
                                                      out.println("-1");
                                                    } %> />
            <button type="submit" class="btn btn-danger" onclick="return handleDelete();">Delete</button>
          </form>
          <form class="mb-0 d-inline" method="POST" action="cvcontroller?action=preview">
            <input type="hidden" name="id" value=<% if (cv != null && cv.getId() != null) {
                                              out.println(cv.getId());
                                            } else {
                                              out.println("-1");
                                            } %> /> 
          <button type="submit" class="btn btn-secondary" onclick="return handlePreview();">Preview</button>
          </form>
        </div>
      </div>

    <form name="saveForm" class="mb-0 d-inline" method="POST" action="cvcontroller?action=save">
      <div class="d-flex justify-content-end mb-3">
          <button type="submit" class="btn btn-primary" onclick="return handleSave();">Save</button>
      </div>

      <input type="hidden" name="id" value=<%
                if (cv != null && cv.getId() != null) {
                  out.println(cv.getId());
                } else {
                  out.println("-1");
                }
              %> />
      <input type="hidden" name="userId" value='<%=user.getId()%>'/>
     

      <jsp:include page="basicinformation.jsp" />

      <jsp:include page="contactinformation.jsp" />
    
      <jsp:include page="education.jsp" />

      <jsp:include page="certificate.jsp" />

      <jsp:include page="workexperience.jsp" />

      <jsp:include page="project.jsp" />
     
      <jsp:include page="skill.jsp" />
      
      <jsp:include page="interest.jsp" />

      <jsp:include page="language.jsp" />

    </form>
  </div>
</body>

</html>
----

<%@ page import="com.github.tm_425006.webproject.bean.CV"%>
<%@ page import="com.github.tm_425006.webproject.bean.Education"%>
<%@ page errorPage="error.jsp"%>

<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="css/bootstrap.css" />
  <link rel="stylesheet" href="css/global.css" />
  <script src="js/popper.js" />
  </script>
  <script src="js/bootstrap.js"></script>
  <script src="js/education.js"></script>
</head>

<body>
      <div class="card mb-3">
        <div class="card-body">
          <div class="container">
            <h5 class="card-title mb-3">Education</h5>
            <div class="h-100 w-100" id="educations">
              <!-- Education will be inserted here -->
              <%
                CV cv = (CV)request.getAttribute("cv");
                if (cv != null && cv.getEducations() != null && cv.getEducations().size() != 0) {
                  for (Education education : cv.getEducations()) {
              %>
               <div class="card mb-3" id='<%="educationComponentId" + education.getId()%>'>
              <div class="card-body">
                <div class="container">
                  <div class="row">
                  <input type="hidden" name="educationId" value='<%=education.getId()%>'>
                  <input type="hidden" name="educationCvId" value='<%=education.getCvId()%>'>
                    <div class="col-md-6 mb-3">
                      <div class="form-floating">
                        <input type="text" class="form-control" name="educationName" required
                        value='<%=education.getName()%>'
                        />
                        <label for="educationName">Degree Name</label>
                      </div>
                    </div>
                    <div class="col-md-6 mb-3">
                      <div class="form-floating">
                        <input type="text" class="form-control" name="educationInstitute" required
                        value='<%=education.getInstitute()%>'
                        />
                        <label for="educationInstitute">Institute Name</label>
                      </div>
                    </div>
                  </div>
                  <div class="row">
                    <div class="col-md-6 mb-3">
                      <div class="form-floating">
                        <input type="date" class="form-control" name="educationStartDate" required
                        value='<%=education.getStartDate()%>'
                        />
                        <label for="educationStartDate">Start Date</label>
                      </div>
                    </div>
                    <div class="col-md-6 mb-3">
                      <div class="form-floating">
                        <input type="date" class="form-control" name="educationEndDate"
                          value='<% if (education.getEndDate() != null) out.print(education.getEndDate());%>'
                        />
                        <label for="educationEndDate">End Date</label>
                      </div>
                    </div>
                  </div>
                  <div class="row">
                    <div class="col-md-6">
                      <div class="form-floating">
                        <input type="text" class="form-control" name="educationGrade" required
                        value='<%=education.getGrade()%>'
                        />
                        <label for="educationGrade">Grade</label>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <button type="button"
                class="opacity-0 hover-opacity-1 position-absolute top-0 start-100 translate-middle badge rounded-pill btn btn-danger"
                onclick=<%out.print(String.format("removeElement('educationComponentId%s')", education.getId()));%>
                >
                x
              </button>
            </div>
              <% }} %>
            </div>
          </div>
          <div class="mb-3">
            <div class="d-flex justify-content-end">
              <button type="button" class="btn btn-primary" 
              onclick=<%
              if (cv == null) {
                        out.print("addEducation()");
              } else {
                        out.print(String.format("addEducation(%s)", cv.getId()));
              }
              %>
              >Add</button>
            </div>
          </div>
        </div>
      </div>
</body>

</html>
----

<%@ page isErrorPage="true"%>
<html lang="en">
  <link rel="stylesheet" href="css/bootstrap.css" />
  <link rel="stylesheet" href="css/global.css" />

  <script src="js/popper.js" />
  </script>
  <script src="js/bootstrap.js"></script>
<body>
     <div class="container">
          <div class="row d-flex w-100 justify-content-center">
        <div class="col-12">
      <div class="card text-danger mb-3">
      <div class="card-header">Error</div>
        <div class="card-body">
            <% if (exception != null) {
                  out.println(exception);
                  }
                else if (request.getParameterMap().containsKey("error"))
                  out.println(request.getParameter("error"));
                else if (request.getAttribute("exception") != null) {
                  Exception requestException = (Exception) request.getAttribute("exception");
                  out.println(requestException);
                  }
                else 
                  out.println("An unknown error occured");
                   %>
          </div>
          </div>
          </div>
        </div>
      </div>
</body>

</html>
----

<%@ page import="com.github.tm_425006.webproject.bean.User"%>
<%@ page import="com.github.tm_425006.webproject.bean.CV"%>
<%@ page import="java.util.ArrayList"%>
<%@ page errorPage="error.jsp"%>

<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="css/bootstrap.css" />
  <link rel="stylesheet" href="css/global.css" />

  <script src="js/popper.js" />
  </script>
  <script src="js/bootstrap.js"></script>
  <title>CV Generator - Home</title>
</head>

<body>

  <jsp:useBean id="user" scope="session" class="com.github.tm_425006.webproject.bean.User" />

  <%
    if (user == null || user.getId() == null) {
      response.sendRedirect("login.jsp");
      return;
      }
  %>


  <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
    <div class="container-md">
      <div class="navbar-brand">
        CV Generator
      </div>
      
      <div class="d-flex">
        <ul class="navbar-nav">
          <li class="nav-item">
          <form class="mb-0 d-inline" method="POST" action="cvcontroller?action=getAll">
            <button type="submit" class="btn btn-primary">Home</button>
          </form>
          </li>
        </ul>
        <ul class="navbar-nav">
          <li class="nav-item">
            <div class="dropdown">
              <a class="btn btn-primary dropdown-toggle" role="button" id="dropdownMenuButton"
                data-bs-toggle="dropdown">
                <jsp:getProperty name="user" property="firstName" />   
              </a>
              <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                 <li><a class="dropdown-item" href="updateaccount.jsp">Update Account</a></li>
                <li><a class="dropdown-item" href="changepassword.jsp">Change Password</a></li>
                <li>
                  <hr class="dropdown-divider">
                </li>
                
                <li><form method="POST" action="usercontroller?action=logout">
                <button type="submit" class="dropdown-item" >Logout</button></form></li>
              </ul>
            </div>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  <div class="container-md">
      <div class="mb-3 mt-3">
        <div class="d-flex justify-content-end">
          <form class="mb-0 d-inline" method="POST" action="cvcontroller?action=getAll">
            <button type="submit" class="btn btn-secondary me-3">Reload</button>
          </form>
          <a href="cv.jsp" class="btn btn-primary">Create CV</a>
        </div>
      </div>

    <%  ArrayList<CV> cvList =  (ArrayList<CV>) request.getAttribute("cvList");
      if (cvList != null && cvList.size() != 0) {
        int i = 0;
        for (CV cv : cvList) {
      %>
        <div class="mb-3">
          <div class="card">
            <div class="card-body">
              <div class="container">
                <div class="d-flex v-100 justify-content-between">
                  <div>
                    <h6 class="card-title d-inline me-3"><%= ++i %>.</h6>
                    <h6 class="card-title d-inline me-3">Creation Date: <span><%= cv.getCreatedDate() %></span></h6>
                    <% if (cv.getModifiedDate() != null) { %>
                    <h6 class="card-title d-inline">Modified Date: <span><%= cv.getModifiedDate() %> </span></h6>
                    <% } %>
                  </div>  
                  <div>
                  <form class="mb-0 d-inline" method="POST" action="cvcontroller?action=preview">
                    <input type="hidden" name="id" value="<%= cv.getId() %>" />
                    <button type="submit" class="btn btn-primary me-3 mb-3">View</button>
                  </form>
                  <form class="mb-0 d-inline" method="POST" action="cvcontroller?action=download">
                    <input type="hidden" name="id" value="<%= cv.getId() %>" />
                    <button type="submit" class="btn btn-primary me-3 mb-3">Download</button>
                  </form>
                  <form class="mb-0 d-inline" method="POST" action="cvcontroller?action=edit">
                    <input type="hidden" name="id" value="<%= cv.getId() %>" />
                    <button type="submit" class="btn btn-primary me-3 mb-3">Edit</button>
                  </form>
                  <form class="mb-0 d-inline" method="POST" action="cvcontroller?action=delete">
                    <input type="hidden" name="id" value="<%= cv.getId() %>" />
                    <button type="submit" class="btn btn-danger mb-3" onclick="return confirm('Confirm delete the CV?');">Delete</button>
                  </form>
                </div>
                </div>
              </div>
            </div>
          </div>
        </div>
    <% } } %>

  </div>
</body>

</html>
----

<%@ page import="com.github.tm_425006.webproject.bean.CV"%>
<%@ page import="com.github.tm_425006.webproject.bean.Interest"%>
<%@ page errorPage="error.jsp"%>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="css/bootstrap.css" />
  <link rel="stylesheet" href="css/global.css" />
  <script src="js/popper.js" />
  </script>
  <script src="js/bootstrap.js"></script>
  <script src="js/interest.js"></script>
</head>

<body>
<jsp:useBean id="user" scope="session" class="com.github.tm_425006.webproject.bean.User" />

<%
    if (user == null || user.getId() == null)  {
      response.sendRedirect("login.jsp?error=Not logged in");
      return;
      } 
  %>
  <div class="card mb-3">
        <div class="card-body">
          <div class="container">
            <h5 class="card-title mb-3">Interests</h5>
            <div class="row" id="interests">
              <!-- Interests will be inserted here -->
              <%
                CV cv = (CV)request.getAttribute("cv");
                if (cv != null && cv.getInterests() != null && cv.getInterests().size() != 0) {
                  for (Interest interest : cv.getInterests()) {
              %>
              <div class="col-4 col-md-2 mb-3" id='<%="interestComponentId" + interest.getId()%>'>
              <input type="hidden" name="interestId" value='<%=interest.getId()%>' />
              <input type="hidden" name="interestCvId" value='<%=interest.getCvId()%>' />
                <div class="form-floating">
                  <input type="text" class="form-control position-relative" name="interestName" required
                  value='<%=interest.getName()%>'
                  />
                  <button type="button"
                    class="opacity-0 hover-opacity-1 position-absolute top-0 start-100 translate-middle badge rounded-pill btn btn-danger"
                    onclick=<%out.print(String.format("removeElement('interestComponentId%s')", interest.getId()));%>
                    >
                    x
                  </button>
                  <label for="interestName">Name</label>
                </div>
              </div>
              <% }} %>
            </div>
          </div>
          <div class="mb-3">
            <div class="d-flex justify-content-end">
              <button type="button" class="btn btn-primary" 
              onclick=<%
              if (cv == null) {
                        out.print("addInterest()");
              } else {
                        out.print(String.format("addInterest(%s)", cv.getId()));
              }
              %>
              >Add</button>
            </div>
            <div tabindex="-1" class="text-danger mb-3" id="interestsHelper"></div>
          </div>
        </div>
      </div>

</body>

</html>
----

<%@ page import="com.github.tm_425006.webproject.bean.CV"%>
<%@ page import="com.github.tm_425006.webproject.bean.Language"%>
<%@ page errorPage="error.jsp"%>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="css/bootstrap.css" />
  <link rel="stylesheet" href="css/global.css" />
  <script src="js/popper.js" />
  </script>
  <script src="js/bootstrap.js"></script>
  <script src="js/language.js"></script>
</head>

<body>
<jsp:useBean id="user" scope="session" class="com.github.tm_425006.webproject.bean.User" />

<%
    if (user == null || user.getId() == null)  {
      response.sendRedirect("login.jsp?error=Not logged in");
      return;
      } 
  %>
  <div class="card mb-3">
        <div class="card-body">
          <div class="container">
            <h5 class="card-title mb-3">Languages</h5>
            <div class="row" id="languages">
              <!-- Languages will be inserted here -->
              <%
                CV cv = (CV)request.getAttribute("cv");
                if (cv != null && cv.getLanguages() != null && cv.getLanguages().size() != 0) {
                  for (Language language : cv.getLanguages()) {
              %>
              <div class="col-4 col-md-2 mb-3" id='<%="languageComponentId" + language.getId()%>'>
              <input type="hidden" name="languageId" value='<%=language.getId()%>' />
              <input type="hidden" name="languageCvId" value='<%=language.getCvId()%>' />
                <div class="form-floating">
                  <input type="text" class="form-control position-relative" name="languageName" required
                  value='<%=language.getName()%>'
                  />
                  <button type="button"
                    class="opacity-0 hover-opacity-1 position-absolute top-0 start-100 translate-middle badge rounded-pill btn btn-danger"
                    onclick=<%out.print(String.format("removeElement('languageComponentId%s')", language.getId()));%>
                    >
                    x
                  </button>
                  <label for="languageName">Name</label>
                </div>
              </div>
              <% }} %>
            </div>
          </div>
          <div class="mb-3">
            <div class="d-flex justify-content-end">
              <button type="button" class="btn btn-primary" 
              onclick=<%
              if (cv == null) {
                        out.print("addLanguage()");
              } else {
                        out.print(String.format("addLanguage(%s)", cv.getId()));
              }
              %>
              >Add</button>
            </div>
            <div tabindex="-1" class="text-danger mb-3" id="languagesHelper"></div>
          </div>
        </div>
      </div>

</body>

</html>
----

<%@ page errorPage="error.jsp"%>
<%@ page import="com.github.tm_425006.webproject.bean.User"%>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="css/bootstrap.css" />
  <link rel="stylesheet" href="css/global.css" />

  <script src="js/popper.js" />
  </script>
  <script src="js/bootstrap.js"></script>
  <title>CV Generator - Login</title>
</head>

<body>
<jsp:useBean id="user" scope="session" class="com.github.tm_425006.webproject.bean.User" />

  <%
    if (user != null && user.getId() != null) {
      response.sendRedirect("index.jsp");
      return;
      }
  %>

  <div class="container-md">
 
      <div class="mb-3">
        <div class="row">
          <center>
            <div class="col-md-4">
              <h1>CV Generator</h1>
              <h2>Login</h2>
            </div>
          </center>
        </div>
      </div>


    <% if(request.getParameterMap().containsKey("error")) { %>
      <jsp:include page="message.jsp">
        <jsp:param name="error" value='<%=request.getParameter("error")%>' />
        <jsp:param name="small" value="true" />
      </jsp:include>
    <% } %>

   <form method="POST" action="usercontroller?action=login">
      <div class="mb-3">
        <div class="row">
          <center>
            <div class="col-md-4">
              <div class="form-floating">
                <input type="email" class="form-control" name="email" required/>
                <label for="email">Email</label>
              </div>
            </div>
          </center>
        </div>
      </div>

      <div class="mb-3">
        <div class="row">
          <center>
            <div class="col-md-4">
              <div class="form-floating">
                <input type="password" class="form-control" name="password" required/>
                <label for="password">Password</label>
              </div>
            </div>
          </center>
        </div>
      </div>


      <div class="mb-3">
        <div class="row">
          <center>
            <div class="col-md-4">
              <div class="d-flex justify-content-between">
                <a href="signup.jsp" class="link-primary text-decoration-none">Not Registered?</a>
                <button type="submit" class="btn btn-primary">Login</button>
              </div>
            </div>
          </center>
        </div>
      </div>
    </form>
  </div>
</body>

</html>
----

<%@ page errorPage="error.jsp"%>
<html lang="en">
  <link rel="stylesheet" href="css/bootstrap.css" />
  <link rel="stylesheet" href="css/global.css" />

  <script src="js/popper.js" />
  </script>
  <script src="js/bootstrap.js"></script>
<body>
      <%
      if (request.getParameterMap().containsKey("error")) {
      %>
      <div class="container">
          <div class="row d-flex w-100 justify-content-center">
          <%
      if (request.getParameterMap().containsKey("small") && 
        Boolean.valueOf(request.getParameterMap().get("small")[0]) == true) {
      %>
            <div class="col-md-4">
      <%} else {%>
        <div class="col-12">
      <% } %>
      <div class="card text-danger mb-3">
      <div class="card-header">Error</div>
        <div class="card-body">
          
        <%
          out.println(request.getParameter("error"));
        %>
          </div>
          
          </div>
          </div>
        </div>
      </div>
      <%
        } else if (request.getParameterMap().containsKey("success")) {
      %>
      <div class="container">
          <div class="row d-flex w-100 justify-content-center">
           <% if (request.getParameterMap().containsKey("small") && 
        Boolean.valueOf(request.getParameterMap().get("small")[0]) == true) {
      %>
            <div class="col-md-4">
      <%} else {%>
        <div class="col-12">
      <% } %>
      <div class="card text-success mb-3">
      <div class="card-header">Success</div>
        <div class="card-body">
          
        <%
          out.println(request.getParameter("success"));
        %>
          </div>
          
          </div>
          </div>
        </div>
      </div>
      <%
        }
      %>
</body>

</html>
----

<jsp:directive.page language="java" contentType="text/html" import="com.github.tm_425006.webproject.bean.User" />
<%@ page errorPage="error.jsp"%>

<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="css/bootstrap.css" />
  <link rel="stylesheet" href="css/global.css" />
  <script src="js/popper.js" />
  </script>
  <script src="js/jquery.js"></script>
  <script src="js/bootstrap.js"></script>
  <title>CV Generator</title>
</head>

<body>
  <%
    if (request.getSession(false) == null) {
      response.sendRedirect("/login.jsp?error=sessionInvalid");
      return;
      }
  %>


  <jsp:useBean id="user" scope="session" class="com.github.tm_425006.webproject.bean.User" />

  <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
    <div class="container-md">
      <a class="navbar-brand" href="index.jsp">
        CV Generator
      </a>
      <div class="d-flex">
        <ul class="navbar-nav">
          <li class="nav-item">
            <a class="nav-link active" href="#">Home</a>
          </li>
        </ul>
        <ul class="navbar-nav">
          <li class="nav-item">
            <div class="dropdown">
              <a class="btn btn-primary dropdown-toggle" role="button" id="dropdownMenuButton"
                data-bs-toggle="dropdown">
                <jsp:getProperty name="user" property="firstName" />   
              </a>
              <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <li><a class="dropdown-item" href="account.jsp">Account</a></li>
                <li>
                  <hr class="dropdown-divider">
                </li>
                
                <li><form method="POST" action="usercontroller?action=logout">
                <button type="submit" class="dropdown-item" >Logout</button></form></li>
              </ul>
            </div>
          </li>
        </ul>
      </div>
    </div>
  </nav>
</body>

</html>
----

<%@ page errorPage="error.jsp"%>
<% 
if (request.getAttribute("preview") != null) {
    out.print(request.getAttribute("preview")); 
}%>
----

<%@ page import="com.github.tm_425006.webproject.bean.CV"%>
<%@ page import="com.github.tm_425006.webproject.bean.Project"%>
<%@ page errorPage="error.jsp"%>

<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="css/bootstrap.css" />
  <link rel="stylesheet" href="css/global.css" />
  <script src="js/popper.js" />
  </script>
  <script src="js/bootstrap.js"></script>
  <script src="js/project.js"></script>
</head>

<body>
<jsp:useBean id="user" scope="session" class="com.github.tm_425006.webproject.bean.User" />

<%
    if (user == null || user.getId() == null)  {
      response.sendRedirect("login.jsp?error=Not logged in");
      return;
      } 
  %>
  <div class="card mb-3">
      <div class="card-body">
        <div class="container">
          <h5 class="card-title mb-3">Projects</h5>
          <div class="h-100 w-100" id="projects">
            <!-- Projects will be inserted here -->
             <%
                CV cv = (CV)request.getAttribute("cv");
                if (cv != null && cv.getProjects() != null && cv.getProjects().size() != 0) {
                  for (Project project : cv.getProjects()) {
              %>
                <div class="card mb-3" id='<%="projectComponentId" + project.getId()%>'>
                <div class="card-body">
                  <div class="container">
                    <div class="row">
                    <input type="hidden" name="projectId" value='<%=project.getId()%>' />
                    <input type="hidden" name="projectCvId" value='<%=project.getCvId()%>' />
                      <div class="col-12 mb-3">
                        <div class="form-floating">
                          <input type="text" class="form-control" name="projectName" required
                          value='<%=project.getName()%>'
                          />
                          <label for="projectName">Name</label>
                        </div>
                      </div>
                    </div>
                    <div class="row">
                      <div class="col-12">
                        <div class="form-floating">
                          <textarea class="form-control" name="projectDetails" required
                          ><%out.print(project.getDetails());%></textarea>
                          <label for="projectDetails">Details</label>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <button type="button"
                  class="opacity-0 hover-opacity-1 position-absolute top-0 start-100 translate-middle badge rounded-pill btn btn-danger"
                  onclick=<%out.print(String.format("removeElement('projectComponentId%s')", project.getId()));%>
                  >
                  x
                </button>
              </div>
              <% }} %>
          </div>
        </div>
        <div class="mb-3">
          <div class="d-flex justify-content-end">
            <button type="button" class="btn btn-primary" 
            onclick=<%
              if (cv == null) {
                        out.print("addProject()");
              } else {
                        out.print(String.format("addProject(%s)", cv.getId()));
              }
              %>
            >Add</button>
          </div>
        </div>
      </div>
    </div>
</body>

</html>
----

<%@ page errorPage="error.jsp"%>

<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="css/bootstrap.css" />
  <link rel="stylesheet" href="css/global.css" />

  <script src="js/popper.js" />
  </script>
  <script src="js/bootstrap.js"></script>
  <script src="js/signup.js"></script>
  <title>CV Generator - Sign Up</title>
</head>

<body>
  <div class="container-md">

      <div class="mb-3">
        <div class="row">
          <center>
            <div class="col-md-4">
              <h1>CV Generator</h1>
              <h2>Sign Up</h2>
            </div>
          </center>
        </div>
      </div>

      <% if(request.getParameterMap().containsKey("error")) { %>
      <jsp:include page="message.jsp">
        <jsp:param name="error" value='<%=request.getParameter("error")%>' />
        <jsp:param name="small" value="true" />
      </jsp:include>
      <% } else if(request.getParameterMap().containsKey("success")) { %>
      <jsp:include page="message.jsp">
        <jsp:param name="success" value='<%=request.getParameter("success")%>' />
        <jsp:param name="small" value="true" />
      </jsp:include>
      <% } %>


    <form method="POST" action="usercontroller?action=signup" onsubmit="return handleSignup()">
      <input type="hidden" name="id" value="-1" />
      <div class="mb-3">
        <div class="row">
          <center>
            <div class="col-md-4">
              <div class="form-floating">
                <input type="text" class="form-control" name="firstName" required/>
                <label for="firstName">First Name</label>
              </div>
              <div id="firstNameHelper" class="form-text text-danger"></div>
            </div>
          </center>
        </div>
      </div>

      <div class="mb-3">
        <div class="row">
          <center>
            <div class="col-md-4">
              <div class="form-floating">
                <input type="text" class="form-control" name="lastName" required/>
                <label for="lastName">Last Name</label>
              </div>
              <div id="lastNameHelper" class="form-text text-danger"></div>
            </div>
          </center>
        </div>
      </div>

      <div class="mb-3">
        <div class="row">
          <center>
            <div class="col-md-4">
              <div class="form-floating">
                <input type="email" class="form-control" name="email" required/>
                <label for="email">Email</label>
              </div>
              <div id="emailHelper" class="form-text text-danger"></div>
            </div>
          </center>
        </div>
      </div>

      <div class="mb-3">
        <div class="row">
          <center>
            <div class="col-md-4">
              <div class="form-floating">
                <input type="password" class="form-control" name="password" required />
                <label for="password">Password</label>
              </div>
              <div id="passwordHelper" class="form-text text-danger"></div>
            </div>
          </center>
        </div>
      </div>

      <div class="mb-3">
        <div class="row">
          <center>
            <div class="col-md-4">
              <div class="form-floating">
                <input type="password" class="form-control" name="confirmPassword" required/>
                <label for="confirmPassword">Confirm Password</label>
              </div>
              <div id="confirmPasswordHelper" class="form-text text-danger"></div>
            </div>
          </center>
        </div>
      </div>

      <div class="mb-3">
        <div class="row">
          <center>
            <div class="col-md-4">
              <div class="form-floating">
                <input type="date" class="form-control" name="birthDate" required />
                <label for="birthDate">Date of Birth</label>
              </div>
              <div id="dateOfBirthHelper" class="form-text text-danger"></div>
            </div>
          </center>
        </div>
      </div>

      <div class="mb-3">
        <div class="row">
          <center>
            <div class="col-md-4">
              <div class="form-floating">
                <textarea class="form-control" name="address" required> </textarea>
                <label for="address">Address</label>
              </div>
              <div id="addressHelper" class="form-text text-danger"></div>
            </div>
          </center>
        </div>
      </div>

      <div class="mb-3">
        <div class="row">
          <center>
            <div class="col-md-4">
              <div class="d-flex justify-content-between">
                <a href="login.jsp" class="link-primary text-decoration-none">Already Registered?</a>
                <button type="submit" class="btn btn-primary">Register</button>
              </div>
            </div>
          </center>
        </div>
      </div>

    </form>
  </div>
</body>

</html>
----

<%@ page import="com.github.tm_425006.webproject.bean.CV"%>
<%@ page import="com.github.tm_425006.webproject.bean.Skill"%>
<%@ page errorPage="error.jsp"%>

<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="css/bootstrap.css" />
  <link rel="stylesheet" href="css/global.css" />
  <script src="js/popper.js" />
  </script>
  <script src="js/bootstrap.js"></script>
  <script src="js/skill.js"></script>
</head>

<body>
<jsp:useBean id="user" scope="session" class="com.github.tm_425006.webproject.bean.User" />

<%
    if (user == null || user.getId() == null)  {
      response.sendRedirect("login.jsp?error=Not logged in");
      return;
      } 
  %>
  <div class="card mb-3">
        <div class="card-body">
          <div class="container">
            <h5 class="card-title mb-3">Skills</h5>
            <div class="row" id="skills">
              <!-- Skills will be inserted here -->
               <%
                CV cv = (CV)request.getAttribute("cv");
                if (cv != null && cv.getSkills() != null && cv.getSkills().size() != 0) {
                  for (Skill skill : cv.getSkills()) {
              %>
                <div class="col-4 col-md-2 mb-3" id='<%="skillComponentId" + skill.getId()%>'>
              <input type="hidden" name="skillId" value='<%=skill.getId()%>' />
              <input type="hidden" name="skillCvId" value='<%=skill.getCvId()%>' />
                <div class="form-floating">
                  <input type="text" class="form-control position-relative" name="skillName" required
                  value='<%=skill.getName()%>'
                  />
                  <button type="button"
                    class="opacity-0 hover-opacity-1 position-absolute top-0 start-100 translate-middle badge rounded-pill btn btn-danger"
                    onclick=<%out.print(String.format("removeElement('skillComponentId%s')", skill.getId()));%>
                    >
                    x
                  </button>
                  <label for="skillName">Name</label>
                </div>
              </div>
              <% }} %>
            </div>
          </div>
          <div class="mb-3">
            <div class="d-flex justify-content-end">
              <button type="button" class="btn btn-primary" 
              onclick=<%
              if (cv == null) {
                        out.print("addSkill()");
              } else {
                        out.print(String.format("addSkill(%s)", cv.getId()));
              }
              %>
              >Add</button>
            </div>
            <div tabindex="-1" class="text-danger mb-3" id="skillsHelper"></div>
          </div>
        </div>
      </div>

</body>

</html>
----

<%@ page import="com.github.tm_425006.webproject.bean.User"%>
<%@ page errorPage="error.jsp"%>

<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="css/bootstrap.css" />
  <link rel="stylesheet" href="css/global.css" />

  <script src="js/popper.js" />
  </script>
  <script src="js/bootstrap.js"></script>
  <title>CV Generator - Update Account</title>
</head>

<body>

  <jsp:useBean id="user" scope="session" class="com.github.tm_425006.webproject.bean.User" />

    <%
      if (user == null || user.getId() == null) {
      response.sendRedirect("login.jsp?error=Not logged in");
      return;
      }
    %>


  <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
    <div class="container-md">
      <div class="navbar-brand">
        CV Generator
      </div>
      
      <div class="d-flex">
        <ul class="navbar-nav">
          <li class="nav-item">
          <form class="mb-0 d-inline" method="POST" action="cvcontroller?action=getAll">
            <button type="submit" class="btn btn-primary">Home</button>
          </form>
          </li>
        </ul>
        <ul class="navbar-nav">
          <li class="nav-item">
            <div class="dropdown">
              <a class="btn btn-primary dropdown-toggle" role="button" id="dropdownMenuButton"
                data-bs-toggle="dropdown">
                <jsp:getProperty name="user" property="firstName" />   
              </a>
              <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                 <li><a class="dropdown-item" href="updateaccount.jsp">Update Account</a></li>
                <li><a class="dropdown-item" href="changepassword.jsp">Change Password</a></li>
                <li>
                  <hr class="dropdown-divider">
                </li>
                
                <li><form method="POST" action="usercontroller?action=logout">
                <button type="submit" class="dropdown-item" >Logout</button></form></li>
              </ul>
            </div>
          </li>
        </ul>
      </div>
    </div>
  </nav>


  <div class="container-md">
      <div class="mb-3 mt-3">
        <div class="row">
          <center>
            <div class="col-md-4">
              <h2>Update Account</h2>
            </div>
          </center>
        </div>
      </div>

      <% if(request.getParameterMap().containsKey("error")) { %>
      <jsp:include page="message.jsp">
        <jsp:param name="error" value='<%=request.getParameter("error")%>' />
      </jsp:include>
      <% } else if(request.getParameterMap().containsKey("success")) { %>
      <jsp:include page="message.jsp">
        <jsp:param name="success" value='<%=request.getParameter("success")%>' />
      </jsp:include>
      <% } %>

    <form method="POST" action="usercontroller?action=updateAccount">
      <div class="mb-3">
        <div class="row">
          <center>
            <div class="col-md-4">
              <div class="form-floating">
                <input type="text" class="form-control" name="firstName" required
                value='<%=user.getFirstName()%>'
                />
                <label for="firstName">First Name</label>
              </div>
            </div>
          </center>
        </div>
      </div>

      <div class="mb-3">
        <div class="row">
          <center>
            <div class="col-md-4">
              <div class="form-floating">
                <input type="text" class="form-control" name="lastName" required
                value='<%=user.getLastName()%>'/>
                <label for="lastName">Last Name</label>
              </div>
            </div>
          </center>
        </div>
      </div>

      <div class="mb-3">
        <div class="row">
          <center>
            <div class="col-md-4">
              <div class="form-floating">
                <input type="email" class="form-control" name="email" required
                value='<%=user.getEmail()%>'/>
                <label for="email">Email</label>
              </div>
            </div>
          </center>
        </div>
      </div>

      <div class="mb-3">
        <div class="row">
          <center>
            <div class="col-md-4">
              <div class="form-floating">
                <input type="date" class="form-control" name="birthDate" required
                value='<%=user.getBirthDate()%>'/>
                <label for="birthDate">Date of Birth</label>
              </div>
            </div>
          </center>
        </div>
      </div>

      <div class="mb-3">
        <div class="row">
          <center>
            <div class="col-md-4">
              <div class="form-floating">
                <textarea class="form-control" name="address" required
              ><jsp:getProperty name="user" property="address" /></textarea>
                <label for="address">Address</label>
              </div>
            </div>
          </center>
        </div>
      </div>

      <div class="mb-3">
        <div class="row">
          <center>
            <div class="col-md-4">
              <div class="form-floating">
                <input type="password" class="form-control" name="password" required/>
                <label for="password">Password</label>
              </div>
            </div>
          </center>
        </div>
      </div>

      <div class="mb-3">
        <div class="row">
          <center>
            <div class="col-md-4">
              <button type="submit" class="btn btn-primary">Save</button>
            </div>
          </center>
        </div>
      </div>

    </form>
  </div>
</body>

</html>
----

<%@ page import="com.github.tm_425006.webproject.bean.CV"%>
<%@ page import="com.github.tm_425006.webproject.bean.WorkExperience"%>
<%@ page errorPage="error.jsp"%>

<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="css/bootstrap.css" />
  <link rel="stylesheet" href="css/global.css" />
  <script src="js/popper.js" />
  </script>
  <script src="js/bootstrap.js"></script>
  <script src="js/workexperience.js"></script>
</head>

<body>
<jsp:useBean id="user" scope="session" class="com.github.tm_425006.webproject.bean.User" />

<%
    if (user == null || user.getId() == null)  {
      response.sendRedirect("login.jsp?error=Not logged in");
      return;
      } 
  %>

   <div class="card mb-3">
        <div class="card-body">
          <div class="container">
            <h5 class="card-title mb-3">Work Experience</h5>
            <div class="h-100 w-100" id="workExperiences">
              <!-- Work Experiences will be inserted here -->
              <%
                CV cv = (CV)request.getAttribute("cv");
                if (cv != null && cv.getWorkExperiences() != null && cv.getWorkExperiences().size() != 0) {
                  for (WorkExperience workExperience : cv.getWorkExperiences()) {
              %>
              <div class="card mb-3" id='<%="workExperienceComponentId" + workExperience.getId()%>'>
                <div class="card-body">
                  <div class="container">
                    <div class="row">
                      <input type="hidden" name="workExperienceId" value='<%=workExperience.getId()%>' />
                      <input type="hidden" name="workExperienceCvId" value='<%=workExperience.getCvId()%>' />
                      <div class="col-md-6 mb-3">
                        <div class="form-floating">
                          <input type="text" class="form-control" name="workExperienceRole" required
                          value='<%=workExperience.getRole()%>'
                          />
                          <label for="workExperienceRole">Role</label>
                        </div>
                      </div>
                      <div class="col-md-6 mb-3">
                        <div class="form-floating">
                          <input type="text" class="form-control" name="workExperienceInstitute" required
                          value='<%=workExperience.getInstitute()%>'
                          />
                          <label for="workExperienceInstitute">Institute Name</label>
                        </div>
                      </div>
                    </div>
                    <div class="row">
                      <div class="col-md-6 mb-3">
                        <div class="form-floating">
                          <input type="date" class="form-control" name="workExperienceStartDate" required
                          value='<%=workExperience.getStartDate()%>'
                          />
                          <label for="workExperienceStartDate">Start Date</label>
                        </div>
                      </div>
                      <div class="col-md-6 mb-3">
                        <div class="form-floating">
                          <input type="date" class="form-control" name="workExperienceEndDate" 
                          value='<% if (workExperience.getEndDate() != null) out.print(workExperience.getEndDate());%>'
                          />
                          <label for="workExperienceEndDate">End Date</label>
                        </div>
                      </div>
                    </div>
                    <div class="row">
                      <div class="col-12">
                        <div class="form-floating">
                          <textarea class="form-control" name="workExperienceDetails" required
                          ><% out.print(workExperience.getDetails()); %></textarea>
                          <label for="workExperienceDetails">Details</label>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <button type="button"
                  class="opacity-0 hover-opacity-1 position-absolute top-0 start-100 translate-middle badge rounded-pill btn btn-danger"
                  onclick=<%out.print(String.format("removeElement('workExperienceComponentId%s')", workExperience.getId()));%>
                  >
                  x
                </button>
              </div>
              <% }} %>
            </div>
          </div>
          <div class="mb-3">
            <div class="d-flex justify-content-end">
              <button type="button" class="btn btn-primary" 
              onclick=<%
              if (cv == null) {
                        out.print("addWorkExperience()");
              } else {
                        out.print(String.format("addWorkExperience(%s)", cv.getId()));
              }
              %>
              >Add</button>
            </div>
          </div>
        </div>
      </div>
</body>

</html>
----

